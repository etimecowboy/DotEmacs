;;   -*- mode: emacs-lisp; coding: utf-8-unix  -*-
;;--------------------------------------------------------------------
;; File name:    `xy-rc-org.el'
;; Author:       Xin Yang
;; Email:        xin2.yang@gmail.com
;; Description:  Org mode settings
;;    ___ _ __ ___   __ _  ___ ___
;;   / _ \ '_ ` _ \ / _` |/ __/ __|
;;  |  __/ | | | | | (_| | (__\__ \
;;  \____|_| |_| |_|\__,_|\___|___/
;;
;;--------------------------------------------------------------------
;; TODO: Divid org-settings into a few more funtions for org-agenda,
;; org-capture and so on.

(eval-when-compile (require 'cl))
(require 'xy-rc-utils)



;; REF: (@url :file-name "http://www.mfasold.net/blog/2009/02/using-emacs-org-mode-to-draft-papers/" :display "Post")
;;;###autoload
(defun xy/org-mode-reftex-setup ()
  (interactive)
  (require 'reftex)
  (turn-on-reftex)
  (and (buffer-file-name)
       (file-exists-p (buffer-file-name))
       (reftex-parse-all)))



;; REF: (@url :file-name "http://permalink.gmane.org/gmane.emacs.gnus.general/78422" :display "auto-format code block for org")
;;;###autoload
(defun tzz-copy-region-with-mode-property (beg end)
  (interactive "r")
  (let ((text (buffer-substring beg end))
        (mode (symbol-name major-mode)))
    (with-temp-buffer
      (insert text)
      (goto-char (point-min))
      (insert "#+BEGIN_SRC"
              (if (string-match "\\(.+\\)-mode" mode)
                  (concat " " (match-string 1 mode))
                "")
              "\n")
      (goto-char (point-max))
      (insert "\n"
              "#+END_SRC"
              "\n")
      (require 'pc-select)
      (copy-region-as-kill (point-min) (point-max)))))



;; html输出时换行带来的多余空格
;; NOTE: It makes html source less readable
;; ;;;###autoload
;; (defun xy/org-html-chinese-no-extra-space
;;   (&optional html-file-name)
;;   "strip extra space brought by fill-paragraph html-file-name is the
;; file generated by org-export.

;; If html-file-name is not given, read it from minibuffer."
;;   (interactive)
;;   (let ((done nil)
;;         tmp thisdone html-file pos
;;         (end-style
;;          ".*\\([^-~]\\)[ \t]*$")
;;         (beginning-style "^[ \t]*[^-~]"))
;;     (if html-file-name
;;         (setq html-file html-file-name)
;;       (setq html-file (read-file-name "html file to process:"))
;;       ;; check file
;;       (if (or (not (file-exists-p html-file))
;;               (file-directory-p html-file)
;;               (not (or (string-match ".+\\.html" html-file)
;;                        (string-match ".+\\.HTML" html-file)
;;                        (string-match ".+\\.htm" html-file)
;;                        (string-match ".+\\.HTM" html-file))))
;;           (error "Error: %s is not a valid filename" html-file)
;;         (save-excursion
;;           (with-current-buffer
;;               (qfind-file-noselect html-file)
;;             (beginning-of-buffer)
;;             (while (not done)
;;               (setq thisdone nil)
;;               ;; check to ensure at least two lines left
;;               (end-of-line)
;;               (if (= (point) (point-max))
;;                   (setq done t)
;;                 ;; check the last char in this line
;;                 (beginning-of-line)
;;                 ;; skip black lines
;;                 (if (and (not (looking-at
;;                                "[ \t]*$"))
;;                          (looking-at end-style))
;;                     (progn
;;                       (setq pos (match-end 1))
;;                       (next-logical-line)
;;                       (beginning-of-line)
;;                       ;; check the first char in this line
;;                       (when (and (not
;;                                   (looking-at "[ \t]*$"))
;;                                  (looking-at beginning-style))
;;                         (setq thisdone t)
;;                         (join-line)
;;                         (goto-char pos)
;;                         (delete-horizontal-space)))))
;;               (end-of-line)
;;               (if (= (point) (point-max))
;;                   (setq done t)
;;                 (if (not thisdone)
;;                     (next-logical-line))))
;;             (save-buffer)))))))

;; 更好的解决方法: html输出时换行带来的多余空格
;; REF: (@url :file-name "http://www.newsmth.net/nForum/#!article/Emacs/103680" :display "newsmth.net")
;; 这儿有一种临时解决方法[1][2]，通过给函数 org-html-paragraph 添加
;; advice，使得导出 html 前自动将段落中的多行中文合并为一行，且不会影响
;; 源文件，个人认为还算实用，可供参考：
;; REF: (@url :file-name "http://fasheng.github.io/blog/2013-09-25-fix-chinese-space-issue-when-exporting-org-mode-to-html.html" :display "[1]")
;; REF: (@url :file-name "https://gist.github.com/fasheng/6696398 " :display "[2]")
;; NOTE: add to `org-post-load'
;; (defadvice org-html-paragraph (before fsh-org-html-paragraph-advice
;;                                       (paragraph contents info) activate)
;;   "Join consecutive Chinese lines into a single long line without
;; unwanted space when exporting org-mode to html."
;;   (let ((fixed-contents)
;;         (orig-contents (ad-get-arg 1))
;;         (reg-han "[[:multibyte:]]"))
;;     (setq fixed-contents (replace-regexp-in-string
;;                           (concat "\\(" reg-han "\\) *\n *\\(" reg-han "\\)")
;;                           "\\1\\2" orig-contents))
;;     (ad-set-arg 1 fixed-contents)
;;     ))



;; REF: (@url :file-name "http://orgmode.org/worg/org-hacks.html#sec-1-3-1" :display "worg")
;;;###autoload
(defun org-transpose-table-at-point ()
  "Transpose orgmode table at point, eliminate hlines."
  (interactive)
  (let ((contents
         (apply #'mapcar* #'list
                ;; remove 'hline from list
                (remove-if-not 'listp
                               ;; signals error if not table
                               (org-table-to-lisp)))))
    (delete-region (org-table-begin) (org-table-end))
    (insert
     (mapconcat (lambda(x)
                  (concat "| " (mapconcat 'identity x " | " )
                          "  |\n" )) contents ""))
    (org-table-align)))



;; NOTE: always use latexmk
(defvar xy:org-xelatex-flag t)
;;;###autoload
(defun xy/org-toggle-xelatex ()
  "Toggle the commands (latexmk/xelatex) to generate PDF file."
  (interactive)
  (if xy:org-xelatex-flag
      (progn
        (setq org-latex-pdf-process
              ;; '("latexmk -xelatex -f -silent -c %b")) ;; no -d
              '("latexmk %b"))

        (setq xy:org-xelatex-flag nil)
        (message "* ---[ Using `latexmk' as the LaTeX PDF exporter now ]---"))
    (progn
      ;; (setq org-latex-to-pdf-process
      ;;       '("xelatex -interaction nonstopmode -output-directory %o %f"
      ;;         "bibtex %b"
      ;;         "xelatex -interaction nonstopmode -output-directory %o %f"
      ;;         "xelatex -interaction nonstopmode -output-directory
      ;;         %o %f"))
      (setq org-latex-to-pdf-process
            '("xelatex -shell-escape -interaction nonstopmode -synctex=1 -output-directory %o %f"
              "bibtex %b"
              "xelatex -shell-escape -interaction nonstopmode -synctex=1 -output-directory %o %f"
              "xelatex -shell-escape -interaction nonstopmode -synctex=1 -output-directory %o %f"))
      (setq xy:org-xelatex-flag t)
      (message "* ---[ Using `xelatex' as the LaTeX PDF exporter now ]---"))))



;; REF: http://doc.norang.ca/org-mode.html
;; FIXME: not work
;;;###autoload
(defun bh/hide-other ()
  "Hide other org trees."
  (interactive)
  (save-excursion
    (org-back-to-heading 'invisible-ok)
    (hide-other)
    (org-cycle)
    (org-cycle)
    (org-cycle)))


;;;###autoload
(defun org-postload ()
  "Settings of `org' after it's been loaded."

  ;;* Fix org and other lisp packages

  ;;** For Emacs daemon mode
  ;; 为了column view能够在emacs daemon模式下正常显示
  (defun wl-org-column-view-uses-fixed-width-face ()
    ;; copy from org-faces.el
    (when (fboundp 'set-face-attribute)
      ;; Make sure that a fixed-width face is used when we have a
      ;; column table.
      (set-face-attribute 'org-column nil
                          :height (face-attribute 'default :height)
                          :family (face-attribute 'default :family))))
  (when (and (fboundp 'daemonp) (daemonp))
    (add-hook 'org-mode-hook
              'wl-org-column-view-uses-fixed-width-face))

  ;; ;;** `seesion.el'
  ;; ;; Don't recursively display gtd files in session list
  ;; (add-to-list 'session-globals-exclude 'org-mark-ring)
  ;; ;; Don't display org agenda files
  ;; (add-to-list 'session-globals-exclude 'org-agenda-files)

  ;;** 让链结后的空格问题
  (setq org-activate-links '(bracket angle radio tag date footnote))
  

  
  ;;* Locate some files

  (setq org-directory
        (concat my-emacs-path "/org"))
  (setq org-default-notes-file
        (concat org-directory "/gtd/Capture.org"))
  (unless (file-exists-p org-default-notes-file)
    (shell-command (concat "touch " org-default-notes-file)))
  (setq org-combined-agenda-icalendar-file
        (concat org-directory "/org.ics"))
  (unless (file-exists-p org-combined-agenda-icalendar-file)
    (shell-command (concat "touch " org-combined-agenda-icalendar-file)))
  (setq org-id-locations-file
        (concat org-directory "/org-id-locations"))
  (unless (file-exists-p org-id-locations-file)
    (shell-command (concat "touch " org-id-locations-file)))
  (setq org-clock-persist-file
        (concat org-directory "/org-clock-save"))
  (unless (file-exists-p org-clock-persist-file)
    (shell-command (concat "touch " org-clock-persist-file)))



  ;;* Some global settings
  
  ;;** Loaded modules
  (setq org-modules
        '(org-bbdb org-bibtex org-crypt org-ctags org-docview org-gnus
                   org-habit org-id org-info org-protocol org-w3m
                   org-bookmark org-mew org-w3m org-protocol))

  ;; (setq org-completion-use-iswitchb t)
  (setq org-completion-use-ido t)

  ;; Disable ENT to follow links
  (setq org-return-follows-link nil)

  ;; Enable inline image display.
  ;; But may breaks access to emacs from an Android phone
  ;; (if window-system
  ;;     (setq org-startup-with-inline-images t)
  ;;   (setq org-startup-with-inline-images nil))
  (setq org-startup-with-inline-images nil)

  (setq org-startup-folded nil)
  (setq org-cycle-include-plain-lists t)

  ;;    Check if in invisible region before inserting or deleting a character
  (setq org-catch-invisible-edits 'smart)
  


  ;;* todo items

  ;;** General settings
  (setq org-todo-keywords
        '((sequence "TODO(t)" "SOMEDAY(x!)" "NEXT(n!)" "STARTED(s)" "WAITING(w!)"
                    "|" "DONE(d!)" "CANCELLED(c@/!)")          
          (sequence "NEW(a)" "REVIEW(r)" "|" "MARK(m!)" "USELESS(u!)")))
  (setq org-use-fast-todo-selection t) ;; C-c C-t key
  (setq org-treat-insert-todo-heading-as-state-change t)
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
  (setq org-enforce-todo-checkbox-dependencies
        t) ;; Block checkbox entries from CHECKED while they have
           ;; children that are not CHECKED
  (setq org-enforce-todo-dependencies
        t) ;; Block todo items from changing state to DONE while
           ;; they have children that are not DONE

  ;;** Define stuck projects
  (setq org-stuck-projects
        '("+prj/!-TODO-SOMEDAY-NEXT"
          ("\\<STARTED\\>" "\\<WAITING\\>")))
  
  ;;** Tag change triggers
  ;; (setq org-todo-state-tags-triggers
  ;;         '(("TODO"      ("new"))
  ;;           ("NEXT"      ("new"))
  ;;           ("STARTED"   ("new"))
  ;;           ("DONE"      ("new") ("old" . t))
  ;;           ("WAITING"   ("new"))
  ;;           ("SOMEDAY"   ("new"))
  ;;           ("CANCELLED" ("new") ("important") ("old" . t))))

  ;;** Add some hook functions to assist my system
  ;; See list of: (@url :file-name "http://orgmode.org/worg/org-configs/org-hooks.html" :display "org-mode hooks")
  ;; REF: (@url :file-name "http://thread.gmane.org/gmane.emacs.orgmode/21402/focus=21413" :display "orgmode mail-list")
  ;; BUG: `state' variable is not recognised
  ;; TODO: waiting for a after-schedule-hook in future release.
  ;; Automaticaly remove the scheduled date/time after
  (add-hook 'org-after-todo-state-change-hook
            '(lambda ()
               ;; change the state to SOMEDAY
               (if (string= org-state "SOMEDAY")
                   (org-remove-timestamp-with-keyword org-scheduled-string))
               ;; ;; Automatically schedule the task to today after change
               ;; ;; the state to NEXT
               ;; (if (string= org-state "NEXT") (org-schedule nil "+0"))
               ;; (when window-system ;; also useful in console
                 (when (try-require 'todochiku)
                   (if (string= org-state "DONE")
                       (todochiku-message "Emacs Org"
                                          "Task DONE, Great Work!"
                                          (todochiku-icon 'check))))))

  ;; todo entry automatically changes to DONE
  ;; when all children are done
  ;; (defun org-summary-todo (n-done n-not-done)
  ;;   "Switch entry to DONE when all subentries are done, to TODO
  ;; otherwise."
  ;;   (let (org-log-done org-log-states)   ; turn off logging
  ;;     (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
  ;; (add-hook ('org-after-todo-statistics-hook 'org-summary-todo)


  
  ;;* Tags

  ;;** Global tags
  ;; (setq org-tag-persistent-alist
  ;;       '(;; GTD contexts
  ;;         (:startgroup)
  ;;         ("@campus" . ?C) ("@BRL" . ?B) ("@library" . ?L)
  ;;         ("@home" . ?H) ("@street" . ?S)
  ;;         (:endgroup)
  ;;         ("@online" . ?O) ("@post" . ?M) ("@email" . ?E)
  ;;         ("@phone" . ?F) ("@people" . ?Z)
  ;;         ;; special tags
  ;;         ("appt" . ?A) ("prj" . ?P) ("repeat" . ?R)
  ;;         ("delegated" . ?D) ("noexport" . ?N)))
  ;; NOTE: it is better to define all the tags in seperate files. 

  (setq org-use-tag-inheritance t)   ;; Inherit tags in most of cases
  (setq org-tags-exclude-from-inheritance '("prj"))   ;; Exclusions

  
  
  ;;* Properties

  ;;** Global settings
  (setq org-use-property-inheritance
        nil)  ;; Don't inheritant property for sub-items,
              ;; since it slows down property searchings.

  (setq org-global-properties   ;; Additional properties
        '(("Effort_ALL" .
           "0:10 0:20 0:30 1:00 1:30 2:00 2:30 3:00 4:00")
          ("Importance_ALL" .
           "A B C")
          ("Score_ALL" .
           "0 1 2 3 4 5 6 7 8 9 10")
          ))
  ;; NOTE: a task should not takes more than 4 hours, otherwise it
  ;; MUST be a project and can be broken into smaller tasks.

  ;;** Priority settings
  (setq org-enable-priority-commands           t
        org-highest-priority                  ?A
        org-lowest-priority                   ?C
        org-default-priority                  ?B
        org-priority-start-cycle-with-default  t)

  ;;** Column view
  (setq org-columns-default-format ; Set default column view headings
        "%CATEGORY(Cat.) %PRIORITY(Pri.) %Importance(Imp.) %6TODO(State) %35ITEM(Details) %ALLTAGS(Tags) %5Effort(Plan){:} %6CLOCKSUM(Clock){Total} %Score(Score)")

    
  
  ;;* Timing settings

  ;;** Log settings
  (setq org-log-done            'time
        org-log-done-with-time   t
        org-log-into-drawer      t
        org-log-redeadline      'note
        org-log-reschedule      'time
        org-log-refile          'time
        org-log-state-notes-insert-after-drawers t
        org-agenda-log-mode-items '(closed state))

  ;;** Clock settings
  (setq org-clock-history-length 10
        org-clock-idle-time      15
        org-clock-in-resume      t
        org-clock-into-drawer    t
        org-clock-in-switch-to-state    "STARTED"
        org-clock-out-switch-to-state   "WAITING"
        org-clock-out-remove-zero-time-clocks t
        org-clock-out-when-done  t
        org-clock-persist        t
        org-clock-auto-clock-resolution 'when-no-clock-is-running
        org-clock-report-include-clocking-task t
        org-clock-persist-query-save t
        org-clock-sound t)
  (org-clock-persistence-insinuate)

  ;;** Alarm

  ;;*** `appt' alarm
  ;; (require 'appt)
  (setq org-agenda-include-diary t)

  ;;**** update appt each time agenda opened
  (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)
  (defadvice  org-agenda-redo (after org-agenda-redo-add-appts)
    "Pressing `r' on the agenda will also add appointments."
    (progn
      (setq appt-time-msg-list nil)
      (org-agenda-to-appt)))
  (ad-activate 'org-agenda-redo)

  ;;*** Python script alarm
  ;; (progn
  ;;   (appt-activate 1)
  ;;   (setq appt-display-format 'window)
  ;;   (setq appt-disp-window-function (function my-appt-disp-window))
  ;;   (defun my-appt-disp-window (min-to-app new-time msg)
  ;;     (call-process "~/script/popup.py" nil 0 nil min-to-app msg
  ;;   new-time)))

  ;;*** `todochiku' display pop-up notification in window-system
  ;; NOTE: May do the job twice with (@file :file-name "xy-rc-appt.el" :to "appt-disp-window-function" :display "`appt-disp-window-function'")
  ;;       May be deleted to use just one
  ;; (when window-system
  ;;   (when (try-require 'todochiku)
  ;;     (setq org-show-notification-handler
  ;;           '(lambda (notification)
  ;;              (todochiku-message "org-mode notification" notification
  ;;                                 (todochiku-icon 'emacs))))))



  ;;* Capture, refile & archive settings


  ;;** Capture settings
  
  ;; ;;*** For `remember.el'
  ;; (setq org-remember-default-headline "Tasks")
  ;; (org-remember-insinuate)
  ;; (define-key global-map "\C-cr" 'org-remember)
  ;; New capture system org-capture since version 7.01g
  ;; (define-key global-map "\C-cc" 'org-capture)
  ;; NOTE: Swithed from `remember' to `org-capture'

  ;;*** For `org-cpature.el'
  (setq org-capture-templates
        '(("w" "Capture a New Wish from Emacs"
           entry (file+headline "~/Dropbox/emacs/org/gtd/Capture.org" "Wish Inbox")
           "** TODO %^{New Wish} %^G\n\
:LOGBOOK:\n\
- Initial State           \"TODO\"       %U\n\
- Link %a\n\
:END:\n\
:PROPERTIES:\n\
:DESCRIPTION: %?\n\
:END:\n\n"
:empty-lines 1 :prepend t :clock-keep t)

          ("n" "Take a Note from Emacs"
           entry (file+headline "~/Dropbox/emacs/org/gtd/Capture.org" "Notes")
           "** NEW %^{Title} %^G\n\n\
:LOGBOOK:\n\
- Timestamp               \"NEW\"        %U\n\
- Link %a\n\
:END:\n\n
%?
\n"
:empty-lines 1 :prepend t :clock-keep t)

;;           ("s" "Scrap Text from Emacs"
;;            entry (file+headline "~/Dropbox/emacs/org/gtd/Capture.org" "Scrapbook")
;;            "** %^{Title} %^G\n\n\
;; *** Source\n\n\
;; - Timestamp                               %U\n\
;; - Source\n\
;;   + Emacs @ %a\n\n\
;; *** Local clipboard\n\n\
;; #+BEGIN_EXAMPLE\n\
;; %x\n\
;; #+END_EXAMPLE\n\n\
;; *** Notes\n\n%?\n"
;;            :empty-lines 1 :prepend t :clock-keep t)


          ("e" "English language study: words/phrases/sentences"
           entry (file+headline "~/Dropbox/emacs/org/gtd/Capture.org" "English")
           "** %? %^g\n\
:LOGBOOK:\n\
- Timestamp                              %U\n\
- Link %a\n\
:END:\n\n"
:empty-lines 1 :prepend t :clock-keep t)

          ("1" "Capture a New Wish from Web Browser"
           entry (file+headline "~/Dropbox/emacs/org/gtd/Capture.org" "Wish Inbox")
           "** TODO %^{New Wish} %^G\n\
:LOGBOOK:\n\
- Initial State           \"TODO\"       %U\n\
- Link %c\n\
:END:\n\
:PROPERTIES:\n\
:DESCRIPTION: %?\n\
:END:\n\n"
:empty-lines 1 :prepend t :clock-keep t)

          ("2" "Take a Note from Web Browser"
           entry (file+headline "~/Dropbox/emacs/org/gtd/Capture.org" "Notes")
           "** NEW %^{Title} %^G\n\
:LOGBOOK:\n\
- Timestamp               \"NEW\"        %U\n\
- Link %c\n\
:END:\n\n
%?
\n"
:empty-lines 1 :prepend t :clock-keep t)

;;           ("3" "Scrap Text from Web Browser"
;;            entry (file+headline "~/Dropbox/emacs/org/gtd/Capture.org" "Scrapbook")
;;            "** %^{Title} %^G\n\n\
;; *** Source\n\n\
;; - Timestamp                               %U\n\
;; - Source\n\
;;   + WWW @ %c\n\n\
;; *** Webpage highlights\n\n\
;; #+BEGIN_EXAMPLE\n\
;; %i\n\
;; #+END_EXAMPLE\n\n\
;; *** Notes\n\n%?
;; \n"
;;            :empty-lines 1 :prepend t :clock-keep t)

          ("4" "Add a bookmark"
           entry (file+headline "~/Dropbox/emacs/org/gtd/Capture.org" "Bookmarks")
           "** NEW %c %^G\n\
:LOGBOOK:\n\
- Timestamp               \"NEW\"        %U\n\
:END:\n\
:PROPERTIES:\n\
:Score: %?\n\
:DESCRIPTION:\n\
:END:\n\n"
:empty-lines 1 :prepend t :clock-keep t)
          ))

  ;;** Refile settings
  
  ;; Targets include this file and any file contributing to the agenda
  ;; - up to 3 levels deep
  (setq org-refile-targets '((nil :maxlevel . 3)
                             (org-agenda-files :maxlevel . 3)))

  ;; Put the newest item on the top
  (setq org-reverse-note-order t)

  ;; Use paths for refile targets
  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps t)

  ;; Allow refile to create parent tasks with confirmation
  (setq org-refile-allow-creating-parent-nodes 'confirm)

  ;; Infomation saved in archives
  (setq org-archive-save-context-info
        '(time file category todo priority itags olpath ltags))

  ;; makes it possible to archive tasks that are not marked DONE
  (setq org-archive-mark-done nil)


  
  ;;* Agenda

  ;;** Agenda files
  ;; (setq org-agenda-files '())
  ;; NOTE: files are set in my local custom file to keep privacy

  ;;** Agenda look
  ;; Do not dim blocked tasks
  (setq org-agenda-dim-blocked-tasks nil)

  ;; Agenda window frame fractions
  (setq org-agenda-window-frame-fractions (quote (0.20 . 0.80)))

  ;; Restore window setup after quite
  (setq org-agenda-restore-windows-after-quit t)

  ;; Show agenda in current window
  (setq org-agenda-window-setup     'current-window
        org-indirect-buffer-display 'current-window)

  ;; Set the default number of days displayed in the agenda (C-c a a)
  (setq org-agenda-span 'week)

  ;; Include/exclude some special items globally
  (setq org-agenda-todo-ignore-scheduled t
        org-agenda-todo-ignore-deadlines nil
        org-agenda-todo-ignore-timestamp nil
        org-agenda-todo-ignore-with-date nil)

  ;; ;; Show all items when do a tag-todo search (C-c a M)
  ;; (org-agenda-tags-todo-honor-ignore-options nil)

  ;; Do not display sublevels
  (setq org-agenda-todo-list-sublevels nil)

  ;; Display items within their dealine periods
  (setq org-agenda-include-deadlines t)

  ;; Agenda block separator
  (setq org-agenda-block-separator "========================================")
  
  ;; Use grid style timeline
  (setq org-agenda-use-time-grid t)
  (setq org-agenda-time-grid
        '((daily today require-timed) "----------------"
          (800 1000 1200 1400 1600 1800)))

  ;; Agenda view presentation and sorting
  ;; org-agenda-tags-column
  ;; org-agenda-prefix-format
  (setq org-agenda-sorting-strategy
        '((agenda time-up category-keep priority-down todo-state-up)
          (todo time-up category-keep priority-down todo-state-up)
          (tags time-up category-keep priority-down todo-state-up)
          (search time-up category-keep priority-down todo-state-up)))

  ;; Custom agenda commands
  (setq org-agenda-custom-commands
        '(
          ("p" "Day Planner"
           ((tags-todo "TODO<>\"TODO\"+TODO<>\"SOMEDAY\"-repeat-sub-bookmark-appt-note"
                       ((org-agenda-overriding-header
                         "Pending Next Actions")
                        (org-tags-match-list-sublevels t)))

            ;; (tags-todo "TODO=\"TODO\"+TIMESTAMP_IA<\"<today>\"-repeat"
            ;;            ((org-agenda-overriding-header
            ;;              "Old Wishes")
            ;;             (org-tags-match-list-sublevels t)))

            ;; (tags-todo "TODO=\"TODO\"+TIMESTAMP_IA<\"<tomorrow>\"+TIMESTAMP_IA>=\"<today>\"-repeat"
            ;;            ((org-agenda-overriding-header
            ;;              "Wish Inbox")
            ;;             (org-tags-match-list-sublevels t)))

            (tags-todo "TODO=\"TODO\"-repeat-note"
                       ((org-agenda-overriding-header
                         "Wish Inbox")
                        (org-tags-match-list-sublevels t)))

            (agenda ""
                    ((org-agenda-ndays 1)
                     (org-agenda-deadline-warning-days 30)
                     (org-agenda-use-time-grid t)
                     (org-agenda-skip-scheduled-if-done t)
                     (org-agenda-skip-deadline-if-done t)
                     (org-agenda-skip-timestamp-if-done t)
                     (org-agenda-skip-archived-trees t)
                     (org-agenda-skip-comment-trees t)
                     (org-agenda-todo-list-sublevel t)
                     (org-agenda-timeline-show-empty-dates nil)))

            (tags-todo "SCHEDULED>=\"<tomorrow>\"+SCHEDULED<=\"<+3d>\"-repeat-note"
                       ((org-agenda-overriding-header
                         "Scheduled tasks in the next 3 days")
                        (org-tags-match-list-sublevels nil)))

            (tags-todo "TODO=\"SOMEDAY\"-sub-note"
                       ((org-agenda-overriding-header
                         "Someday/Maybe Items")
                        (org-tags-match-list-sublevels nil)))))

          ;;----------------------------------------------------------
          ("d" "Agenda Today"
           ((agenda ""
                    ((org-agenda-ndays 1)
                     (org-agenda-deadline-warning-days 14)
                     (org-agenda-use-time-grid t)
                     (org-agenda-skip-scheduled-if-done t)
                     (org-agenda-skip-deadline-if-done t)
                     (org-agenda-skip-timestamp-if-done t)
                     (org-agenda-skip-archived-trees t)
                     (org-agenda-skip-comment-trees t)
                     (org-agenda-todo-list-sublevel t)
                     (org-agenda-timeline-show-empty-dates nil)))

            (tags-todo "TODO=\"STARTED\"|TODO=\"WAITING\""
                       ((org-agenda-overriding-header
                         "Current Next Actions")
                        (org-tags-match-list-sublevels t)))

            (tags      "CLOSED<\"<tomorrow>\"+CLOSED>=\"<today>\""
                       ((org-agenda-overriding-header
                         "Finished Next Actions")
                        (org-tags-match-list-sublevels nil)
                        (org-agenda-skip-scheduled-if-done nil)
                        (org-agenda-skip-deadline-if-done nil)
                        (org-agenda-skip-timestamp-if-done nil)
                        (org-agenda-skip-archived-trees nil)))))

          ;;----------------------------------------------------------
          ("w" "Weekly Review"
           ((agenda ""
                    ((org-agenda-span 'week)
                     (org-agenda-ndays 7)
                     (org-agenda-deadline-warning-days 60)
                     (org-agenda-use-time-grid t)
                     (org-agenda-skip-scheduled-if-done nil)
                     (org-agenda-skip-deadline-if-done nil)
                     (org-agenda-skip-timestamp-if-done nil)
                     (org-agenda-skip-archived-trees nil)
                     (org-agenda-skip-comment-trees nil)
                     (org-agenda-todo-list-sublevel t)
                     (org-agenda-timeline-show-empty-dates t)))

            (tags     "CLOSED<\"<tomorrow>\"+CLOSED>=\"<-1w>\"-repeat-sub"
                      ((org-agenda-overriding-header
                        "Archieve Closed Next Actions in this week")
                       (org-tags-match-list-sublevels t)
                       (org-agenda-skip-scheduled-if-done nil)
                       (org-agenda-skip-deadline-if-done nil)
                       (org-agenda-skip-timestamp-if-done nil)
                       (org-agenda-skip-archived-trees nil)))

            (tags-todo "TODO<>\"TODO\"+SCHEDULED<\"<tomorrow>\"+SCHEDULED>=\"<-1w>\"-repeat-prj"
                       ((org-agenda-overriding-header
                         "Re-schedule Pending Next Actions")
                        (org-tags-match-list-sublevels t)))

            (tags-todo "TODO=\"TODO\"-repeat"
                       ((org-agenda-overriding-header
                         "Process Old Wishes")
                        (org-tags-match-list-sublevels t)))

            (tags      "prj/!-TODO-SOMEDAY-sub"
                       ((org-agenda-overriding-header
                         "Projects Review")
                        (org-tags-match-list-sublevels t)))))
          ;;----------------------------------------------------------
          
          ;; ("f" "Grep FIXME" occur-tree "\\<FIXME\\>")

          ;;----------------------------------------------------------
          ("n" "Notes in the past 10 days" tags
           "+note+TIMESTAMP_IA<\"<tomorrow>\"+TIMESTAMP_IA>=\"<-10d>\""
           ((org-agenda-overriding-header
                       "Recent notes (10d)")
                      (org-tags-match-list-sublevels nil)))

          ;;----------------------------------------------------------
          ("b" "Bookmarks in the past 30 days" tags
           "+bookmark+TIMESTAMP_IA<\"<tomorrow>\"+TIMESTAMP_IA>=\"<-30d>\""
           ((org-agenda-overriding-header
             "Recent bookmarks (30d)")
            (org-tags-match-list-sublevels nil)))

          ;;----------------------------------------------------------
          ("s" "Scraps in the past 30 days" tags
           "+scrap+TIMESTAMP_IA<\"<tomorrow>\"+TIMESTAMP_IA>=\"<-30d>\""
           ((org-agenda-overriding-header
             "Recent scraps (30d)")
            (org-tags-match-list-sublevels nil)))

          ;;----------------------------------------------------------
          ("l" "English study (30d)" tags
           "+english+TIMESTAMP_IA<\"<tomorrow>\"+TIMESTAMP_IA>=\"<-30d>\""
           ((org-agenda-overriding-header "Recent ideas (refile ASAP)")
            (org-tags-match-list-sublevels nil)))

          ;;----------------------------------------------------------
                    ))

  ;;** Agenda view export C-x C-w
  (setq org-agenda-exporter-settings
        '((ps-number-of-columns 2)
          (ps-landscape-mode t)
          ;; (org-agenda-prefix-format " [ ] ")
          ;; (org-agenda-with-colors nil)
          ;; (org-agenda-remove-tags t)
          (org-agenda-add-entry-text-maxlines 5)
          (htmlize-output-type 'css)))
  ;; ;; Add to custom command dispatcher
  ;; (setq org-agenda-custom-commands
  ;;       '(("X" agenda "" nil ("~/emacs/org/gtd/agenda.html" "~/emacs/org/gtd/agenda.pdf"))
  ;;         ("Y" alltodo "" nil ("~/emacs/org/gtd/todo.html" "~/emacs/org/gtd/todo.txt" "~/emacs/org/gtd/todo.pdf"))
  ;;         ("p" "Agenda and PhD-related tasks"
  ;;          ((agenda "")
  ;;           (tags-todo "phd")
  ;;           (tags "learn"))
  ;;          nil
  ;;          ("~/emacs/gtd/phd.html"))
  ;;         ("g" "Agenda and Geek-related tasks"
  ;;          ((agenda)
  ;;           (tags-todo "geek")
  ;;           (tags "geek"))
  ;;          nil
  ;;          ("~/emacs/org/gtd/geek.html"))))

  ;;** MobileOrg settings
  ;; NOTE: I use Dropbox serveice
  (setq org-mobile-directory "~/Dropbox/MobileOrg")
  (setq org-mobile-encryption-tempfile
        (concat org-directory "/orgtmpcrypt"))
  (unless (file-exists-p org-mobile-encryption-tempfile)
    (shell-command (concat "touch " org-mobile-encryption-tempfile)))
  (setq org-mobile-files org-agenda-files)
  (setq org-mobile-inbox-for-pull
        (concat org-directory "/gtd/from-mobile.org"))
  (unless (file-exists-p org-mobile-inbox-for-pull)
    (shell-command (concat "touch " org-mobile-inbox-for-pull)))



  ;;* Org Babel settings

  ;;** babel evaluation languages
  (setq org-babel-load-languages
        '((C . t) ;; (R . t) (asymptote . t)
                (ditaa . t) (dot . t) (emacs-lisp . t)
                (latex . t) (org . t)
                (matlab . t) (octave . t)
                (python . t) ;; (perl . t) (ruby . t)
                (sh . t)
                ))

  (require 'ob-C)
  ;; BUG: cannot find this library on Windows 7, strange bug.
  ;;      cause emacs error on Linux, may related with my c-mode settings.
  ;; (require 'ob-R)
  ;; (require 'asymptote)
  (require 'ob-ditaa)
  (require 'ob-dot)
  (require 'ob-latex)
  (require 'ob-emacs-lisp)
  (require 'ob-matlab)
  (require 'ob-octave)
  (Windows
   (setq org-babel-matlab-shell-command "matlabshell.cmd"))
  (GNULinux
   (setq org-babel-matlab-shell-command "MATLAB"))
  (setq org-babel-default-header-args:matlab
  '((:results . "output") (:session . "*MATLAB*")))
  (require 'ob-octave)
  (require 'ob-org)
  ;; (require 'ob-perl)
  (require 'ob-python)
  ;; (require 'ob-ruby)
  (require 'ob-sh)
  
  ;; Custom library of babel file. Add code blocks to the library from
  ;; any Org-mode file using the `org-babel-lob-ingest' (bound to C-c
  ;; C-v i).
  ;; BUG:
  ;; (setq org-babel-lob-files
  ;;       '("~/emacs/org/babel/library-of-babel.org"))

  ;;   (defvar org-babel-octave-wrapper-method
  ;;     "%s
  ;; save -ascii %s ans")

  (setq org-src-fontify-natively t
        org-confirm-babel-evaluate nil
        org-export-babel-evaluate nil
        org-src-tab-acts-natively t
        org-edit-src-turn-on-auto-save t
        org-adapt-indentation nil ;; it is not good for my snippets
        org-edit-src-content-indentation 2
        org-enable-fixed-width-editor t
        org-special-ctrl-o t
        org-src-preserve-indentation t
        org-src-window-setup 'current-window
        org-src-ask-before-returning-to-edit-buffer nil)

  ;; Delete babel temporary diretory instead of trash it.
  ;; macro `bypass-trash-in-function(fun)' sets FUN to always use
  ;; normal deletion, and never trash.
  (mapc (lambda (fun) (eval `(bypass-trash-in-function ,fun)))
        '(org-babel-remove-temporary-directory))


  
  ;;* Org export settings

  ;;** General settings
  (setq org-export-backends
        '(ascii beamer html icalendar latex md org freemind rss))
  (setq org-file-apps ;; set default viewer for exported files
        '((auto-mode       . emacsclient)
          ("\\.odc\\'"     . system)
          ("\\.odf\\'"     . system)
          ("\\.odi\\'"     . system)
          ("\\.otp\\'"     . system)
          ("\\.odp\\'"     . system)
          ("\\.otg\\'"     . system)
          ("\\.odg\\'"     . system)
          ("\\.ots\\'"     . system)
          ("\\.ods\\'"     . system)
          ("\\.odm\\'"     . system)
          ("\\.ott\\'"     . system)
          ("\\.odt\\'"     . system)
          ("\\.mm\\'"      . system)
          ("\\.pdf\\'"     . system)
          ("\\.x?html?\\'" . system)
          ("\\.png\\'"     . system)
          ("\\.jpg\\'"     . system)
          ("\\.bmp\\'"     . system)
          ("\\.gif\\'"     . system)
          ))

  ;;** LaTeX export settings
  ;; (require 'ox)
  ;; (require 'ox-latex)
  ;; (require 'ox-beamer)
  (setq org-latex-coding-system 'utf-8-unix)
  (setq org-latex-table-caption-above nil)
  (setq org-latex-tables-column-borders t)
  ;; code listing settings, new `minted' is also supported
  (setq org-latex-listings t)
  (setq org-latex-preview-ltxpng-directory
        "./") ;; fix the bug of current version
  
  ;; NOTE: Use org to write the draft of the document, and you can
  ;; fine-tuning of the latex template for the final version.
  (setq org-latex-classes
   (quote (("beamer"
            "\\documentclass[presentation,9pt]{beamer}\n\
             [DEFAULT-PACKAGES]\n\
             [PACKAGES]\n\
             [EXTRA]"
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
           ;;-----------------------------------------------
           ("article" "\\documentclass[11pt]{article}"
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
            ("\\paragraph{%s}" . "\\paragraph*{%s}")
            ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
           ;;------------------------------------------------
           ("report" "\\documentclass[11pt]{report}"
            ("\\part{%s}" . "\\part*{%s}")
            ("\\chapter{%s}" . "\\chapter*{%s}")
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
           ;;-------------------------------------------------
           ("book" "\\documentclass[11pt]{book}"
            ("\\part{%s}" . "\\part*{%s}")
            ("\\chapter{%s}" . "\\chapter*{%s}")
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
           ;;--------------------------------------------------
           ("letter" "\\documentclass[11pt]{letter}"
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
            ("\\paragraph{%s}" . "\\paragraph*{%s}")
            ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
           ;;--------------------------------------------------
           ("koma-article"
             "\\documentclass{scrartcl}
             [NO-DEFAULT-PACKAGES]
             [EXTRA]"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
           ;;--------------------------------------------------
           ;; ("beamer" "\\documentclass{beamer}"
           ;;  org-beamer-sectioning)
           ;;--------------------------------------------------
           ;; NOTE: ctex documentclasses, no need to use ctex package
           ("ctexart" "\\documentclass[UTF8, winfonts, cs4size, \
a4paper, cap, punct, nospace, indent, fancyhdr, hypperref, fntef]\
{ctexart}"
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
            ("\\paragraph{%s}" . "\\paragraph*{%s}")
            ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
           ;;--------------------------------------------------
           ("ctexrep" "\\documentclass[UTF8, winfonts, cs4size, \
a4paper, cap, punct, nospace, indent, fancyhdr, hypperref, fntef]\
{ctexrep}"
            ("\\part{%s}" . "\\part*{%s}")
            ("\\chapter{%s}" . "\\chapter*{%s}")
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
           ;;--------------------------------------------------
           ("ctexbook" "\\documentclass[UTF8, winfonts, cs4size, \
a4paper, cap, punct, nospace, indent, fancyhdr, hypperref, fntef]\
{ctexbook}"
            ("\\part{%s}" . "\\part*{%s}")
            ("\\chapter{%s}" . "\\chapter*{%s}")
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
           )))
  
  ;; NOTE: The default `inputenc' and `fontenc' packages conflicts
  ;; with `xecjk' and `ctex'. The encoding of the input latex files
  ;; don't need to be set.
  (setq org-latex-default-packages-alist
        '(("" "fixltx2e" nil) ("" "graphicx" t) ("" "longtable" nil)
          ("" "float" nil) ("" "wrapfig" nil) ("" "rotating" nil)
          ("normalem" "ulem" t) ("" "amsmath" t) ("" "textcomp" t)
          ("" "marvosym" t) ("" "wasysym" t) ("" "amssymb" t)
          ("" "hyperref" nil) "\\tolerance=1000"
          ;;("" "amsmath" t) ;; this package cause error, no need
          ))

  ;; NOTE: Alist of packages to be inserted in every LaTeX header.
  ;; These will be inserted after `org-latex-default-packages-alist'.
  (setq org-latex-packages-alist
        '(;; The following 3 packages are required if using `listings'
          ;; ("svgnames, table" "xcolor" t)
          ("" "xcolor" t)
          ("" "listings" t)
          ("" "setspace" nil)
          ;; Display various latex-related logos
          ("" "metalogo" t) ("" "mflogo" t) ("" "texnames" t)
          ;; ("" "amsmath" nil) ;; this package cause error, no need
          ;; ("" "tikz" nil)
          ;; xelatex font adjustment (by default)
          ;; ("" "fontspec" nil)
          ;; Some extra text markups
          ;; ("normalem" "ulem" t)
          ;; Some figure-related packages
          ;; ("" "rotating" t) ("" "subfig" t)
          ;; Some table-related packages
          ;; ("" "booktabs" t) ("" "longtable" nil) ("" "multirow" t)
          ;; ("" "tabularx" t) ("" "warpcol" t)
          ;; Some document layout/structure-related packages
          ;; ("" "etex" nil) ("" "multicol" nil) ("" "multind" nil)
          ;; ("" "titlesec" nil)
          ))

  ;; NOTE: LaTeX header that will be used when processing a fragment
  (setq org-format-latex-header
"\\documentclass{article}
\\usepackage[usenames]{color}
[PACKAGES]
[DEFAULT-PACKAGES]
\\usepackage{tikz}
\\usetikzlibrary{
arrows, calc, fit, patterns, plotmarks, shapes, shadows,
datavisualization, er, automata, backgrounds, chains, topaths,
trees, matrix, fadings, shadings, through, positioning, scopes,
intersections, fixedpointarithmetic, petri,
decorations.pathreplacing, decorations.pathmorphing,
decorations.markings}
\\usepackage{pgfgantt}

\\pagestyle{empty}             % do not remove
% The settings below are copied from fullpage.sty
\\setlength{\\textwidth}{\\paperwidth}
\\addtolength{\\textwidth}{-3cm}
\\setlength{\\oddsidemargin}{1.5cm}
\\addtolength{\\oddsidemargin}{-2.54cm}
\\setlength{\\evensidemargin}{\\oddsidemargin}
\\setlength{\\textheight}{\\paperheight}
\\addtolength{\\textheight}{-\\headheight}
\\addtolength{\\textheight}{-\\headsep}
\\addtolength{\\textheight}{-\\footskip}
\\addtolength{\\textheight}{-3cm}
\\setlength{\\topmargin}{1.5cm}
\\addtolength{\\topmargin}{-2.54cm}")

  (setq org-format-latex-options
      '(:foreground default :background
                    default :scale 1.0
                    :html-foreground
                    "Black"
                    :html-background
                    "Transparent"
                    :html-scale 1.0
                    :matchers ("begin"
                               "$1" "$"
                               "$$"
                               "\\("
                               "\\[")))

  (setq org-format-latex-signal-error t)
  (setq org-latex-create-formula-image-program 'imagemagick)

  ;; ;; Use xelatex instead of pdflatex for better font supports.
  ;; ;; REF: (@url :file-name "http://orgmode.org/worg/org-tutorials/org-latex-export.html" :display "Worg:org-latex-export")
  ;; ;;      (@url :file-name "http://orgmode.org/worg/org-faq.html#using-xelatex-for-pdf-export" :display "Worg:faq:using-xelatex-for-pdf-export")
  ;; ;;      (@url :file-name "http://comments.gmane.org/gmane.emacs.orgmode/71847" :display "xelatex-and-the-new-exporter@orgmode-mail-list")
  (setq org-latex-to-pdf-process
        '("xelatex -shell-escape -interaction nonstopmode -synctex=1 -output-directory %o %f"
          "bibtex %b"
          "xelatex -shell-escape -interaction nonstopmode -synctex=1 -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -synctex=1 -output-directory %o %f"))
  (setq xy:xelatex-flag t)

  ;; Better solution: use latexmk which is globally configured by `.latexmkrc' file
  ;; (setq org-latex-to-pdf-process
  ;;   '("latexmk -c -bm DRAFT -pdf -pdflatex=\"xelatex -synctex=1 %O %S\" -silent -pvc -f %b"))
  ;; (setq org-latex-to-pdf-process
  ;;   '("latexmk -xelatex -d -f -silent -c %b"))
  ;; (setq org-latex-to-pdf-process '("latexmk %b"))

  ;; ;; Choose pdf engine by custom key words
  ;; ;; Originally taken from Bruno Tavernier:
  ;; ;; http://thread.gmane.org/gmane.emacs.orgmode/31150/focus=31432
  ;; ;; but adapted to use latexmk 4.20 or higher.
  ;; (defun my-auto-tex-cmd ()
  ;;   "When exporting from .org with latex, automatically run latex,
  ;;    pdflatex, or xelatex as appropriate, using latexmk."
  ;;   (let ((texcmd)))
  ;;   ;; default command: oldstyle latex via dvi
  ;;   (setq texcmd "latexmk -dvi -pdfps -silent %b")
  ;;   ;; pdflatex -> .pdf
  ;;   (if (string-match "LATEX_CMD: pdflatex" (buffer-string))
  ;;       (setq texcmd "latexmk -pdf -silent %b"))
  ;;   ;; xelatex -> .pdf
  ;;   (if (string-match "LATEX_CMD: xelatex" (buffer-string))
  ;;       (setq texcmd "latexmk -xelatex -silent %b"))
  ;;   ;; LaTeX compilation command
  ;;   (setq org-latex-to-pdf-process (list texcmd)))

  ;; ;; (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-cmd)
  ;; (add-hook 'org-export-before-parsing-hook 'my-auto-tex-cmd)
  
  ;; ;; ;; Specify default packages to be included in every tex file, whether pdflatex or xelatex
  ;; ;; (setq org-latex-packages-alist
  ;; ;;       '(("" "graphicx" t)
  ;; ;;         ("" "longtable" nil)
  ;; ;;         ("" "float" nil)))

  ;; ;; (defun my-auto-tex-parameters ()
  ;; ;;   "Automatically select the tex packages to include."
  ;; ;;   ;; default packages for ordinary latex or pdflatex export
  ;; ;;   (setq org-latex-default-packages-alist
  ;; ;;         '(("AUTO" "inputenc" t)
  ;; ;;           ("T1"   "fontenc"   t)
  ;; ;;           (""     "fixltx2e"  nil)
  ;; ;;           (""     "wrapfig"   nil)
  ;; ;;           (""     "soul"      t)
  ;; ;;           (""     "textcomp"  t)
  ;; ;;           (""     "marvosym"  t)
  ;; ;;           (""     "wasysym"   t)
  ;; ;;           (""     "latexsym"  t)
  ;; ;;           (""     "amssymb"   t)
  ;; ;;           (""     "hyperref"  nil)))
  ;; ;;   ;; Packages to include when xelatex is used
  ;; ;;   (if (string-match "LATEX_CMD: xelatex" (buffer-string))
  ;; ;;       (setq org-latex-default-packages-alist
  ;; ;;             '(("" "fontspec" t)
  ;; ;;               ("" "xunicode" t)
  ;; ;;               ("" "url" t)
  ;; ;;               ;; ("" "rotating" t)
  ;; ;;               ;; ("american" "babel" t)
  ;; ;;               ;; ("babel" "csquotes" t)
  ;; ;;               ("" "soul" t)
  ;; ;;               ("xetex" "hyperref" nil)
  ;; ;;               )))
  ;; ;;   ;; (if (string-match "LATEX_CMD: xelatex" (buffer-string))
  ;; ;;   ;;     (setq org-latex-classes
  ;; ;;   ;;           (cons '("article"
  ;; ;;   ;;                   "\\documentclass[11pt,article,oneside]{memoir}"
  ;; ;;   ;;                   ("\\section{%s}" . "\\section*{%s}")
  ;; ;;   ;;                   ("\\subsection{%s}" . "\\subsection*{%s}")
  ;; ;;   ;;                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ;; ;;   ;;                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
  ;; ;;   ;;                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
  ;; ;;   ;;                 org-latex-classes)))
  ;; ;;   )

  ;; ;; ;; (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-parameters)
  ;; ;; (add-hook 'org-export-before-parsing-hook 'my-auto-tex-parameters)
  
  ;; load reftex
  (require 'reftex)
  ;; load cd-latex
  (require 'cdlatex)

  ;; load auctex for better latex editing support C-c '
  ;; (xy/auctex-start)

  (add-hook 'org-mode-hook
            '(lambda ()
               ;; BUG: org-mobile
               (turn-on-auto-fill)
               ;; BUG: start `reftex' manually, or there will be an error
               ;; (xy/org-mode-reftex-setup)
               ;; (turn-on-org-cdlatex) ;; start it manually is better.
               ;;;; change default math-symbol prefix
               ;; (org-defkey org-cdlatex-mode-map "`" 'nil)
               ;; (org-defkey org-cdlatex-mode-map "¬" 'cdlatex-math-symbol)
               (flyspell-mode 1)
               ;; (autopair-mode -1)
               ;; (xy/yas-start)
               ;; (xy/linkd-start)
               ;; (xy/set-font-write)
               ))

  ;;** Use ditaa/graphviz to generate png pictures.
  ;;  *  Use artist mode to draw ascii picutre,
  ;;  *  then convert to png pictures using ditaa.
  ;; Now ditta is included in org, but I use the
  ;; official release instead.
  ;;
  ;; Tips:
  ;;  *  C-x b to switch buffers. Originally,
  ;;     it is bound for `switch-to-buffer'.
  ;;     Instead, binding `iswitchb-buffer'
  ;;     to C-x b is much easier to use.
  ;;  *  C-x n n to narrow the region, `narrow-to-region'.
  ;;     It is very useful to prevent the unwanted change
  ;;     on other portion of the buffer, and makes the user
  ;;     concentrating on what he or she want to do.
  ;;     The narrowing is reverted by the command, C-x n w `widen'.
  ;;  *  Create a begin_src block for the appropriate tool,
  ;;     edit the text, and build the pictures with C-c C-c.
  ;;     You can view the result directly in Emacs with C-c C-o
  ;;     in the block.

  (setq org-ditaa-jar-path (concat my-local-exec-path "/ditaa.jar"))

  ;; (try-require 'org-babel-init)
  ;; (try-require 'org-babel-ditaa)
  ;; (try-require 'org-babel-dot)
  ;; (org-babel-load-library-of-babel)
  ;; Displays the results in a new frame and
  ;; close the new frame quickly after previewing the results
  ;; (global-set-key [f11] (lambda ()
  ;;                                  (interactive)
  ;;                                  (unless (buffer-modified-p)
  ;;                                    (kill-buffer (current-buffer)))
  ;;                                  (delete-frame)))

  
  
  ;;** html export
  ;; 更好的解决方法: html输出时换行带来的多余空格
  ;; REF: (@url :file-name "http://www.newsmth.net/nForum/#!article/Emacs/103680" :display "newsmth.net")
  ;; 这儿有一种临时解决方法[1][2]，通过给函数 org-html-paragraph 添加
  ;; advice，使得导出 html 前自动将段落中的多行中文合并为一行，且不会影响
  ;; 源文件，个人认为还算实用，可供参考：
  ;; REF: (@url :file-name "http://fasheng.github.io/blog/2013-09-25-fix-chinese-space-issue-when-exporting-org-mode-to-html.html" :display "[1]")
  ;; REF: (@url :file-name "https://gist.github.com/fasheng/6696398 " :display "[2]")
  ;; NOTE: add to `org-post-load'
  (defadvice org-html-paragraph (before fsh-org-html-paragraph-advice
                                        (paragraph contents info) activate)
    "Join consecutive Chinese lines into a single long line without
  unwanted space when exporting org-mode to html."
    (let ((fixed-contents)
          (orig-contents (ad-get-arg 1))
          (reg-han "[[:multibyte:]]"))
      (setq fixed-contents (replace-regexp-in-string
                            (concat "\\(" reg-han "\\) *\n *\\(" reg-han "\\)")
                            "\\1\\2" orig-contents))
      (ad-set-arg 1 fixed-contents)
      ))
  

  
  ;;* Org publish settings
  ;; NOTE:
  ;; Org-mode 8.0 发布网页时要:
  ;; (require 'ox-publish)
  ;; 千万不要用:
  ;; (require 'org-publish)!
  ;; 由于 Emacs 内置的 Org-mode 为 7.x 版本，自带有一个 org-publish, 而
  ;; 在 8.0 中已经改名为 ox-publish. 这样 require 两个都能够正常加载，但
  ;; 在执行 M-x org-publish 时则会出错。
  (require 'ox-publish)
  (setq org-publish-timestamp-directory
        (concat org-directory "/timestamps"))
  (setq org-publish-use-timestamps-flag t)

  ;; NOTE: not in use
  ;; List of projects
  ;; http://127.0.0.1/  (localhost)
  ;; local-org are the org-files that generate the content
  ;; local-extra are images and css files that need to be included
  ;; local is the top-level project that gets published
  ;; (setq org-publish-project-alist
  ;;     (quote(
  ;;            ("local-org"
  ;;             :base-directory "~/emacs/org/source/"
  ;;             ;;            :preparation-funtion
  ;;             ;;            :completion-function
  ;;             :base-extension "org"
  ;;             ;;            :exclude
  ;;             ;;            :include
  ;;             :publishing-function org-publish-org-to-html
  ;;             :plain-source nil
  ;;             :htmlized-source nil
  ;;             ;;            :link-up
  ;;             ;;            :link-home
  ;;             :language utf-8
  ;;             ;;            :customtime
  ;;             ;;            :headline-levels
  ;;             ;;            :section-numbers
  ;;             ;;            :section-number-format
  ;;             :table-of-contents t
  ;;             ;;            :preserve-breaks
  ;;             :archived-trees nil
  ;;             :emphasize t
  ;;             :sub-superscript t
  ;;             ;;            :special-strings
  ;;             :footnotes t
  ;;             :drawers nil
  ;;             :tags t
  ;;             :todo-keywords t
  ;;             :priority t
  ;;             :TeX-macros t
  ;;             :LaTeX-fragments t
  ;;             :latex-listings nil
  ;;             :skip-before-1st-heading nil
  ;;             :fixed-width t
  ;;             :timestamps t
  ;;             :author-info t
  ;;             :email-info nil
  ;;             :creator-info nil
  ;;             :tables t
  ;;             :table-auto-headline t
  ;;             :style-include-default t
  ;;             :style "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://dl.dropbox.com/u/7817597/stylesheets/org.css\" />"
  ;;             ;;            :style-extra "<link rel=\"stylesheet\" href=\"http://127.0.0.1/stylesheets/org.css\" type=\"text/css\" />"
  ;;             :convert-org-links t
  ;;             :inline-images t
  ;;             ;;            :html-extension
  ;;             ;;            :xml-declaration
  ;;             ;;            :html-table-tag
  ;;             :expand-quoted-html t
  ;;             :timestamp t
  ;;             ;; :publishing-directory "/ftp:xin@127.0.0.1:/org/"
  ;;             :publishing-directory "~/emacs/org/html/"
  ;;             ;;            :preamble
  ;;             ;;            :postamble
  ;;             ;;            :auto-preamble
  ;;             ;;            :auto-postamble
  ;;             :author "Xin Yang"
  ;;             :email "Xin2.Yang@gmail.com"
  ;;             ;;            :select-tags
  ;;             ;;            :exclude-tags
  ;;             ;;            :latex-image-options
  ;;             :auto-sitemap t
  ;;             :sitemap-filename "SiteMap.org"
  ;;             :sitemap-title "Sitemap of local website"
  ;;             :sitemap-function org-publish-org-sitemap
  ;;             :sitemap-sort-folders last
  ;;             :sitemap-alphabetically t
  ;;             :sitemap-ignore-case t
  ;;             :makeindex nil
  ;;             :recursive t
  ;;             )
  ;;            ("local-extra"
  ;;             :base-directory "~/emacs/org/source/"
  ;;             :base-extension "css\\|pdf\\|png\\|jpg\\|gif\\|CSS\\|PDF\\|PNG\\|JPG\\|GIF\\|c\\|C\\|m\\|M\\|vhd\\|VHD\\|v\\|V\\|cpp\\|CPP"
  ;;             ;; :publishing-directory "/ftp:xin@127.0.0.1:/org/"
  ;;             :publishing-directory "~/emacs/org/html/"
  ;;             :publishing-function org-publish-attachment
  ;;             :recursive t
  ;;             :author nil
  ;;             )
  ;;            ("local-addon"
  ;;             :base-directory "~/emacs/org/addon/"
  ;;             :base-extension "css\\|pdf\\|png\\|jpg\\|gif\\|CSS\\|PDF\\|PNG\\|JPG\\|GIF"
  ;;             ;; :publishing-directory "/ftp:xin@127.0.0.1:/org/"
  ;;             :publishing-directory "~/emacs/org/html/"
  ;;             :publishing-function org-publish-attachment
  ;;             :recursive t
  ;;             :author nil
  ;;             )
  ;;            ("local"
  ;;             :components ("local-org" "local-extra" "local-addon")
  ;;             )

  ;;            ;; PhD documents export to LaTeX draft
  ;;            ("phd-org"
  ;;             :base-directory "~/emacs/org/source/phd"
  ;;             ;;            :preparation-funtion
  ;;             ;;            :completion-function
  ;;             :base-extension "org"
  ;;             ;;            :exclude
  ;;             ;;            :include
  ;;             :publishing-function org-publish-org-to-latex
  ;;             :plain-source nil
  ;;             :htmlized-source nil
  ;;             :link-up t
  ;;             :link-home t
  ;;             :language utf-8
  ;;             ;;            :customtime
  ;;             ;;            :headline-levels
  ;;             ;;            :section-numbers
  ;;             ;;            :section-number-format
  ;;             :table-of-contents t
  ;;             ;;            :preserve-breaks
  ;;             :archived-trees nil
  ;;             :emphasize t
  ;;             :sub-superscript t
  ;;             ;;            :special-strings
  ;;             :footnotes t
  ;;             :drawers nil
  ;;             :tags nil
  ;;             :todo-keywords nil
  ;;             :priority nil
  ;;             :TeX-macros t
  ;;             :LaTeX-fragments t
  ;;             :latex-listings t
  ;;             :skip-before-1st-heading nil
  ;;             :fixed-width t
  ;;             :timestamps t
  ;;             :author-info t
  ;;             :email-info t
  ;;             :creator-info nil
  ;;             :tables t
  ;;             :table-auto-headline t
  ;;             ;;            :style-include-default t
  ;;             ;;            :style "<link rel=\"stylesheet\" href=\"https://dl.dropbox.com/u/7817597/stylesheets/org.css\" type=\"text/css\">"
  ;;             ;;            :style-extra "<link rel=\"stylesheet\" href=\"http://127.0.0.1/stylesheets/org.css\" type=\"text/css\" />"
  ;;             :convert-org-links t
  ;;             :inline-images t
  ;;             ;;            :html-extension
  ;;             ;;            :xml-declaration
  ;;             ;;            :html-table-tag
  ;;             ;;            :expand-quoted-html t
  ;;             ;;            :timestamp t
  ;;             :publishing-directory "~/emacs/org/latex/phd"
  ;;             ;;            :preamble
  ;;             ;;            :postamble
  ;;             ;;            :auto-preamble
  ;;             ;;            :auto-postamble
  ;;             :author "Xin Yang"
  ;;             :email "Xin2.Yang@gmail.com"
  ;;             ;;            :select-tags
  ;;             ;;            :exclude-tags
  ;;             ;;-----------------------------------------------------------
  ;;             ;;            :latex-image-options
  ;;             ;;------------------------------------------------------------
  ;;             :auto-sitemap nil
  ;;             ;; :sitemap-filename "SiteMap.org"
  ;;             ;; :sitemap-title "Index of my PhD documents"
  ;;             ;; :sitemap-function org-publish-org-sitemap
  ;;             ;; :sitemap-sort-folders last
  ;;             ;; :sitemap-alphabetically t
  ;;             ;; :sitemap-ignore-case t
  ;;             :makeindex nil
  ;;             :recursive t
  ;;             )
  ;;            ("phd-img"
  ;;             :base-directory "~/emacs/org/source/phd/img"
  ;;             :base-extension "pdf\\|ps\\|png\\|jpg\\|bmp\\|eps\\|svg\\|PDF\\|PS\\|PNG\\|JPG\\|BMP\\|EPS\\|SVG"
  ;;             :publishing-directory "~/emacs/org/latex/phd/img"
  ;;             :publishing-function org-publish-attachment
  ;;             :recursive t
  ;;             )
  ;;            ("phd-src"
  ;;             :base-directory "~/emacs/org/source/phd/src"
  ;;             :base-extension "v\\|vhd\\|c\\|hcc\\|cpp\\|m\\|V\\|VHD\\|C\\|HCC\\|CPP\\|M"
  ;;             :publishing-directory "~/emacs/org/latex/phd/src"
  ;;             :publishing-function org-publish-attachment
  ;;             :recursive t
  ;;             )
  ;;            ("phd-bib"
  ;;             :base-directory "~/emacs/org/source/phd/bib"
  ;;             :base-extension "bib\\|bst\\|BIB\\|BST"
  ;;             :publishing-directory "~/emacs/org/latex/phd/bib"
  ;;             :publishing-function org-publish-attachment
  ;;             :recursive t
  ;;             )
  ;;            ("phd-all"
  ;;             :components ("phd-org" "phd-img" "phd-src" "phd-bib")
  ;;             )
  ;;            )))

  ;; NOTE: not in use
  ;; (setq org-protocol-project-alist
  ;;       '(;; ("Worg"
  ;;         ;;  :base-url "http://orgmode.org/worg/"
  ;;         ;;  :working-directory "/home/user/worg/"
  ;;         ;;  :online-suffix ".html"
  ;;         ;;  :working-suffix ".org")
  ;;         ("My local Org-notes"
  ;;          :base-url "http://localhost/org/"
  ;;          :working-directory "~/emacs/org/source/"
  ;;          :online-suffix ".php"
  ;;          :working-suffix ".org")))


  
  ;;* Contributed lisps

  ;; ;;** org-mime
  ;; ;; REF: (@url :file-name "http://orgmode.org/worg/org-contrib/org-mime.html" :display "worg")
  ;; (when (try-require 'org-mime)
  ;;   ;; (setq org-mime-library 'mml)
  ;;   (add-hook 'org-mode-hook
  ;;             (lambda ()
  ;;               (local-set-key "\C-c\M-o"
  ;;                              'org-mime-org-buffer-htmlize)))
  ;;   (add-hook 'org-mime-html-hook
  ;;             (lambda ()
  ;;               (org-mime-change-element-style
  ;;                "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
  ;;                              "#E6E1DC" "#232323"))
  ;;               (org-mime-change-element-style
  ;;                "blockquote" "border-left: 2px solid gray; padding-left: 4px;"))))

  ;;** `org-google-weather'
  ;; NOTE: google disabled its weather api recently
  ;; google-weather-el for org
  ;; Add the following in one of your Org file.
  ;;   * Weather
  ;;   %%(org-google-weather "New York" "en-gb")
  ;; (eval-after-load "org-google-weather" '(org-google-weather-postload))
  ;; (try-require 'org-google-weather)

  ;;** `org-location-google-maps'
  ;; google-maps API for org
  (try-require 'org-location-google-maps)

  ;;** `org-html5presentation'
  ;; NOTE: not very useful now
  ;; HTML5 Presentation export for Org-mode
  ;; (try-require 'org-html5presentation)

  ;;** `o-blog'
  ;; A stand-alone blog and publication tool for org-mode.
  (try-require 'o-blog)

  ;;** `org2blog'
  ;; NOTE: waiting for its upgrade for org version 8.0
  ;; (try-require 'org2blog)

  ;;** `org-bullets.el'
  ;; NOTE: not very useful.
  ;; (when window-system
  ;;   (try-require 'org-bullets)
  ;;   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  ;;** `org-presie.el'
  ;; NOTE: not very useful, waiting for a upgrade for org version 8.0
  ;; (when window-system (try-require 'org-presie))

  (message "* ---[ org post-load configuration is complete ]---"))

(provide 'xy-rc-org)
