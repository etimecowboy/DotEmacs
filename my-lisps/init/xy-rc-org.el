;;   -*- mode: emacs-lisp; coding: utf-8-unix  -*-
;; Time-stamp: <2012-10-02 Tue 16:54 by xin on p5q>
;;--------------------------------------------------------------------
;; File name:    `xy-rc-org.el'
;; Author:       Xin Yang
;; Email:        xin2.yang@gmail.com
;; Description:  Org mode settings
;;    ___ _ __ ___   __ _  ___ ___
;;   / _ \ '_ ` _ \ / _` |/ __/ __|
;;  |  __/ | | | | | (_| | (__\__ \
;;  \____|_| |_| |_|\__,_|\___|___/
;;
;;--------------------------------------------------------------------
;; TODO: Divid org-settings into a few more funtions for org-agenda,
;; org-capture and so on.

(eval-when-compile (require 'cl))
(require 'xy-rc-utils)

;; REF: (@url :file-name "http://www.mfasold.net/blog/2009/02/using-emacs-org-mode-to-draft-papers/" :display "Post")
;;;###autoload
(defun org-mode-reftex-setup ()
  (require 'reftex)
  (turn-on-reftex)
  (and (buffer-file-name)
       (file-exists-p (buffer-file-name))
       (reftex-parse-all)))

;; REF: (@url :file-name "http://permalink.gmane.org/gmane.emacs.gnus.general/78422" :display "auto-format code block for org")
;;;###autoload
(defun tzz-copy-region-with-mode-property (beg end)
  (interactive "r")
  (let ((text (buffer-substring beg end))
        (mode (symbol-name major-mode)))
    (with-temp-buffer
      (insert text)
      (goto-char (point-min))
      (insert "#+begin_src"
              (if (string-match "\\(.+\\)-mode" mode)
                  (concat " " (match-string 1 mode))
                "")
              "\n")
      (goto-char (point-max))
      (insert "\n"
              "#+end_src"
              "\n")
      (copy-region-as-kill (point-min) (point-max)))))

;; 处理html输出时auto-fill带来的多余空格
;; NOTE: It makes html file less readable
;;;###autoload
(defun xy/org-html-chinese-no-extra-space
  (&optional html-file-name)
  "strip extra space brought by fill-paragraph html-file-name is the
file generated by org-export.

If html-file-name is not given, read it from minibuffer."
  (interactive)
  (let ((done nil)
        tmp thisdone html-file pos
        (end-style
         ".*\\([^-~]\\)[ \t]*$")
        (beginning-style "^[ \t]*[^-~]"))
    (if html-file-name
        (setq html-file html-file-name)
      (setq html-file (read-file-name "html file to process:"))
      ;; check file
      (if (or (not (file-exists-p html-file))
              (file-directory-p html-file)
              (not (or (string-match ".+\\.html" html-file)
                       (string-match ".+\\.HTML" html-file)
                       (string-match ".+\\.htm" html-file)
                       (string-match ".+\\.HTM" html-file))))
          (error "Error: %s is not a valid filename" html-file)
        (save-excursion
          (with-current-buffer
              (qfind-file-noselect html-file)
            (beginning-of-buffer)
            (while (not done)
              (setq thisdone nil)
              ;; check to ensure at least two lines left
              (end-of-line)
              (if (= (point) (point-max))
                  (setq done t)
                ;; check the last char in this line
                (beginning-of-line)
                ;; skip black lines
                (if (and (not (looking-at
                               "[ \t]*$"))
                         (looking-at end-style))
                    (progn
                      (setq pos (match-end 1))
                      (next-logical-line)
                      (beginning-of-line)
                      ;; check the first char in this line
                      (when (and (not
                                  (looking-at "[ \t]*$"))
                                 (looking-at beginning-style))
                        (setq thisdone t)
                        (join-line)
                        (goto-char pos)
                        (delete-horizontal-space)))))
              (end-of-line)
              (if (= (point) (point-max))
                  (setq done t)
                (if (not thisdone)
                    (next-logical-line))))
            (save-buffer)))))))

;; REF: (@url :file-name "http://orgmode.org/worg/org-hacks.html#sec-1-3-1" :display "worg")
;;;###autoload
(defun org-transpose-table-at-point ()
  "Transpose orgmode table at point, eliminate hlines."
  (interactive)
  (let ((contents
         (apply #'mapcar* #'list
                ;; remove 'hline from list
                (remove-if-not 'listp
                               ;; signals error if not table
                               (org-table-to-lisp)))))
    (delete-region (org-table-begin) (org-table-end))
    (insert
     (mapconcat (lambda(x)
                  (concat "| " (mapconcat 'identity x " | " )
                          "  |\n" )) contents ""))
    (org-table-align)))

(defvar xy:latexmk-flag t)
;;;###autoload
(defun xy/toggle-latex-to-pdf-process ()
  "Toggle the commands (latexmk/xelatex) to generate PDF file."
  (interactive)
  (if xy:latexmk-flag
      (progn
        (setq org-latex-to-pdf-process
              '("latexmk -xelatex -d -f -silent -c %b"))
        (setq xy:latexmk-flag nil)
        (message "* ---[ Using `latexmk' as the LaTeX PDF exporter now ]---"))
    (progn
      (setq org-latex-to-pdf-process
            '("xelatex -interaction nonstopmode -output-directory %o %f"
              "bibtex %b"
              "xelatex -interaction nonstopmode -output-directory %o %f"
              "xelatex -interaction nonstopmode -output-directory %o %f"))
      (setq xy:latexmk-flag t)
      (message "* ---[ Using `xelatex' as the LaTeX PDF exporter now ]---"))))

;;;###autoload
(defun org-postload ()
  "Settings of `org' after it's been loaded."

  ;;==================================================================
  ;; Some basic settings and some confliction fixes

  ;; Locate some files
  (setq org-directory
        (concat my-emacs-path "/org"))
  (setq org-default-notes-file
        (concat org-directory "/gtd/Capture.org"))
  (unless (file-exists-p org-default-notes-file)
    (shell-command (concat "touch " org-default-notes-file)))
  (setq org-combined-agenda-icalendar-file
        (concat org-directory "/org.ics"))
  (unless (file-exists-p org-combined-agenda-icalendar-file)
    (shell-command (concat "touch " org-combined-agenda-icalendar-file)))
  (setq org-id-locations-file
        (concat org-directory "/org-id-locations"))
  (unless (file-exists-p org-id-locations-file)
    (shell-command (concat "touch " org-id-locations-file)))

  ;;------------------------------------------------------------------
  ;; Loaded modules
  (setq org-modules
        '(org-bbdb org-bibtex org-crypt org-docview org-gnus
                   org-info org-jsinfo org-mew org-w3m org-protocol))

  ;;------------------------------------------------------------------
  ;; Fix some other lisp packages

  ;; For Emacs daemon mode
  ;; 为了column view能够在emacs daemon模式下正常显示
  (defun wl-org-column-view-uses-fixed-width-face ()
    ;; copy from org-faces.el
    (when (fboundp 'set-face-attribute)
      ;; Make sure that a fixed-width face is used when we have a
      ;; column table.
      (set-face-attribute 'org-column nil
                          :height (face-attribute 'default :height)
                          :family (face-attribute 'default :family))))
  (when (and (fboundp 'daemonp) (daemonp))
    (add-hook 'org-mode-hook
              'wl-org-column-view-uses-fixed-width-face))

  ;; 让链结后的空格问题
  (setq org-activate-links '(bracket angle radio tag date footnote))

  ;;------------------------------------------------------------------
  ;; (setq org-completion-use-iswitchb t)
  (setq org-completion-use-ido t)

  ;; Disable ENT to follow links
  (setq org-return-follows-link nil)

  ;; Enable inline image display.
  ;; But may breaks access to emacs from an Android phone
  (if window-system
      (setq org-startup-with-inline-images t)
    (setq org-startup-with-inline-images nil))
  (setq org-startup-folded nil)
  (setq org-cycle-include-plain-lists t)

  ;;==================================================================
  ;; GTD system settings
  ;; NOTE: set in local custom file for my privacy
  ;; agenda files
  ;; (setq org-agenda-files '(".org" ".org"))

  ;; For `seesion.el'
  ;; BUG: error when load this two lines
  ;; Don't recursively display gtd files in session list
  (add-to-list 'session-globals-exclude 'org-mark-ring)
  ;; Don't display org agenda files
  (add-to-list 'session-globals-exclude 'org-agenda-files)

  ;;------------------------------------------------------------------
  ;; GTD contexts & tags
  (setq org-tag-persistent-alist
        '(;; GTD contexts
          (:startgroup)
          ("@campus" . ?C) ("@BRL" . ?B) ("@library" . ?L)
          ("@home" . ?H) ("@street" . ?S)
          (:endgroup)
          ("@online" . ?O) ("@post" . ?M) ("@email" . ?E)
          ("@phone" . ?F) ("@people" . ?Z)
          ;; special tags
          ("appt" . ?A) ("proj" . ?P) ("repeat" . ?R)
          ("delegated" . ?D) ("noexport" . ?N)))

  ;; Inherit tags in most of cases
  (setq org-use-tag-inheritance t)
  ;; Exclusions of tag inheritance
  (setq org-tags-exclude-from-inheritance '("proj"))

  ;;------------------------------------------------------------------
  ;; Properties
  (setq org-use-property-inheritance
        nil)  ;; Don't inheritant property for sub-items,
              ;; since it slows down property searchings.

  ;; NOTE: a task should not takes more than 4 hours, otherwise it
  ;; MUST be a project and can be broken into smaller tasks.
  (setq org-global-properties   ;; Additional properties
        '(("Effort_ALL" .
           "0:10 0:20 0:30 1:00 1:30 2:00 2:30 3:00 4:00")
          ("Importance_ALL" .
           "A B C")
          ("Score_ALL" .
           "0 1 2 3 4 5 6 7 8 9 10")
          ))

  ;;------------------------------------------------------------------
  ;; Priority
  (setq org-enable-priority-commands t)
  (setq org-highest-priority ?A)
  (setq org-lowest-priority ?C)
  (setq org-default-priority ?B)
  (setq org-priority-start-cycle-with-default t)

  ;;------------------------------------------------------------------
  ;; Column view
  ; Set default column view headings: Task Effort Clock_Summary
  (setq org-columns-default-format
        "%CATEGORY(Cat.) %PRIORITY(Pri.) %Importance(Imp.) %6TODO(State) %35ITEM(Details) %ALLTAGS(Tags) %5Effort(Plan){:} %6CLOCKSUM(Clock){Total} %Score(Score)")

  ;;------------------------------------------------------------------
  ;; TODO item keywords
  (setq org-use-fast-todo-selection t) ;; C-c C-t key
  (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n!)" "STARTED(s)" "|"
                    "DONE(d!)")
            (sequence "SOMEDAY(x)" "WAITING(w!)" "|"
                    "CANCELLED(c@/!)")))

  ;; (setq org-todo-keyword-faces
  ;;         (quote (("TODO" :foreground "red" :weight bold)
  ;;                 ("NEXT" :foreground "blue" :weight bold)
  ;;                 ("STARTED" :foreground "blue" :weight bold)
  ;;                 ("DONE" :foreground "forest green" :weight bold)
  ;;                 ("WAITING" :foreground "orange" :weight bold)
  ;;                 ("SOMEDAY" :foreground "magenta" :weight bold)
  ;;                 ("CANCELLED" :foreground "forest green" :weight bold)
  ;;                 ("OPEN" :foreground "blue" :weight bold)
  ;;                 ("CLOSED" :foreground "forest green" :weight bold)
  ;;                 ("PHONE" :foreground "forest green" :weight bold))))

  ;; Tag change triggers
  ;; (setq org-todo-state-tags-triggers
  ;;         '(("TODO"      ("new"))
  ;;           ("NEXT"      ("new"))
  ;;           ("STARTED"   ("new"))
  ;;           ("DONE"      ("new") ("old" . t))
  ;;           ("WAITING"   ("new"))
  ;;           ("SOMEDAY"   ("new"))
  ;;           ("CANCELLED" ("new") ("important") ("old" . t))))

  ;; Add some hook functions to assist my system
  ;; See list of: (@url :file-name "http://orgmode.org/worg/org-configs/org-hooks.html" :display "org-mode hooks")
  ;; REF: (@url :file-name "http://thread.gmane.org/gmane.emacs.orgmode/21402/focus=21413" :display "orgmode mail-list")
  ;; BUG: `state' variable is not recognised
  ;; TODO: waiting for a after-schedule-hook in future release.
  ;; Automaticaly remove the scheduled date/time after
  (add-hook 'org-after-todo-state-change-hook
            '(lambda ()
               ;; change the state to SOMEDAY
               (if (string= org-state "SOMEDAY") (org-schedule t))
               ;; Automatically schedule the task to today after change
               ;; the state to NEXT
               (if (string= org-state "NEXT") (org-schedule nil "+0"))
               ;; (when window-system ;; also useful in console
                 (when (try-require 'todochiku)
                   (if (string= org-state "DONE")
                       (todochiku-message "Emacs Org"
                                          "Task DONE, Great Work!"
                                          (todochiku-icon 'check))))))

  ;; Treat adding item as state change
  (setq org-treat-insert-todo-heading-as-state-change t)

  (setq org-enforce-todo-checkbox-dependencies
        t) ;; Block checkbox entries from CHECKED while they have
           ;; children that are not CHECKED

  (setq org-enforce-todo-dependencies
        nil)   ;; Block TODO items from changing state to DONE while
               ;; they have children that are not DONE

  (setq org-stuck-projects ;; Define stuck projects
        '("+proj/!-TODO-SOMEDAY"
          ("\\<NEXT\\>" "\\<STARTED\\>")))

  ;; TODO entry automatically changes to DONE
  ;; when all children are done
  ;; (defun org-summary-todo (n-done n-not-done)
  ;;   "Switch entry to DONE when all subentries are done, to TODO
  ;; otherwise."
  ;;   (let (org-log-done org-log-states)   ; turn off logging
  ;;     (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
  ;; (add-hook ('org-after-todo-statistics-hook 'org-summary-todo)

  ;;------------------------------------------------------------------
  ;; Log settings

  (setq org-log-done        'time)
  (setq org-log-done-with-time  t)
  (setq org-log-into-drawer     t)
  (setq org-log-redeadline  'note)
  (setq org-log-reschedule  'time)
  (setq org-log-refile      'time)
  (setq org-log-state-notes-insert-after-drawers t)
  (setq org-agenda-log-mode-items '(closed state))

  ;;------------------------------------------------------------------
  ;; Clock settings

  (setq org-clock-history-length 10)
  (setq org-clock-idle-time 15)
  (setq org-clock-in-resume t)
  (setq org-clock-in-switch-to-state "STARTED")
  (setq org-clock-out-switch-to-state "WAITING")
  ;; Separate drawers for clocking and logs
  ;; (setq org-drawers '("LOGBOOK" "PROPERTIES"))
  (setq org-clock-into-drawer t)
  (setq org-clock-out-remove-zero-time-clocks t)
  (setq org-clock-out-when-done t)
  (setq org-clock-persist t)
  (setq org-clock-persist-file
        (concat org-directory "/org-clock-save"))
  (unless (file-exists-p org-clock-persist-file)
    (shell-command (concat "touch " org-clock-persist-file)))
  (setq org-clock-auto-clock-resolution 'when-no-clock-is-running)
  (setq org-clock-report-include-clocking-task t)
  (setq org-clock-persist-query-save t)
  (setq org-clock-sound t)
  (org-clock-persistence-insinuate)

  ;;------------------------------------------------------------------
  ;; Alarm

  ;; `appt' alarm
  ;; (require 'appt)
  (setq org-agenda-include-diary t)
  ;; update appt each time agenda opened
  (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)
  (defadvice  org-agenda-redo (after org-agenda-redo-add-appts)
    "Pressing `r' on the agenda will also add appointments."
    (progn
      (setq appt-time-msg-list nil)
      (org-agenda-to-appt)))
  (ad-activate 'org-agenda-redo)

  ;; Python script alarm
  ;; (progn
  ;;   (appt-activate 1)
  ;;   (setq appt-display-format 'window)
  ;;   (setq appt-disp-window-function (function my-appt-disp-window))
  ;;   (defun my-appt-disp-window (min-to-app new-time msg)
  ;;     (call-process "~/script/popup.py" nil 0 nil min-to-app msg
  ;;   new-time)))

  ;; `todochiku' display pop-up notification in window-system
  ;; NOTE: May do the job twice with (@file :file-name "xy-rc-appt.el" :to "appt-disp-window-function" :display "`appt-disp-window-function'")
  ;;       May be deleted to use just one
  ;; (when window-system
  ;;   (when (try-require 'todochiku)
  ;;     (setq org-show-notification-handler
  ;;           '(lambda (notification)
  ;;              (todochiku-message "org-mode notification" notification
  ;;                                 (todochiku-icon 'emacs))))))

  ;;------------------------------------------------------------------
  ;; Custom ageda views

  ;; Do not dim blocked tasks
  (setq org-agenda-dim-blocked-tasks nil)

  ;; Agenda window frame fractions
  (setq org-agenda-window-frame-fractions (quote (0.20 . 0.80)))

  ;; Restore window setup after quite
  (setq org-agenda-restore-windows-after-quit t)

  ;; Show agenda in current window
  (setq org-agenda-window-setup 'current-window)
  (setq org-indirect-buffer-display 'current-window)

  ;; Set the default number of days displayed in the agenda (C-c a a)
  (setq org-agenda-span 'week)

  ;; Include/exclude some special items globally
  (setq org-agenda-todo-ignore-scheduled t)
  (setq org-agenda-todo-ignore-deadlines nil)
  (setq org-agenda-todo-ignore-timestamp nil)
  (setq org-agenda-todo-ignore-with-date nil)

  ;; Show all items when do a tag-todo search (C-c a M)
  ;; (org-agenda-tags-todo-honor-ignore-options nil)

  ;; Do not display sublevels
  (setq org-agenda-todo-list-sublevels nil)

  ;; Display items within their dealine periods
  (setq org-agenda-include-deadlines t)

  ;; Use grid style timeline
  (setq org-agenda-use-time-grid t)
  (setq org-agenda-time-grid
        '((daily today require-timed) "----------------"
          (800 1000 1200 1400 1600 1800)))

  ;; Agenda view presentation and sorting
  ;; org-agenda-tags-column
  ;; org-agenda-prefix-format
  (setq org-agenda-sorting-strategy
        '((agenda time-up category-keep priority-down todo-state-up)
          (todo time-up category-keep priority-down todo-state-up)
          (tags time-up category-keep priority-down todo-state-up)
          (search time-up category-keep priority-down todo-state-up)))

  ;; custom agenda commands
  ;; Custom agenda command definitions
  (setq org-agenda-custom-commands
        '(
          ("f" "Grep FIXME" occur-tree "\\<FIXME\\>")
          ;;----------------------------------------------------------
          ("n" "Notes in the past 10 days" tags
           "+note+TIMESTAMP_IA<\"<tomorrow>\"+TIMESTAMP_IA>=\"<-10d>\""
           ((org-agenda-overriding-header
                       "Recent notes (10d)")
                      (org-tags-match-list-sublevels nil)))

          ;;----------------------------------------------------------
          ("b" "Bookmark in the past 30 days" tags
           "+bookmark+TIMESTAMP_IA<\"<tomorrow>\"+TIMESTAMP_IA>=\"<-30d>\""
           ((org-agenda-overriding-header
             "Recent bookmarks (30d)")
            (org-tags-match-list-sublevels nil)))

          ;;----------------------------------------------------------
          ("s" "Scraps in the past 30 days" tags
           "+scrap+TIMESTAMP_IA<\"<tomorrow>\"+TIMESTAMP_IA>=\"<-30d>\""
           ((org-agenda-overriding-header
             "Recent scraps (30d)")
            (org-tags-match-list-sublevels nil)))

          ;;----------------------------------------------------------
          ("l" "English study (30d)" tags
           "+english+TIMESTAMP_IA<\"<tomorrow>\"+TIMESTAMP_IA>=\"<-30d>\""
           ((org-agenda-overriding-header "Recent ideas (refile ASAP)")
            (org-tags-match-list-sublevels nil)))

          ;;----------------------------------------------------------
          ("p" "Day Planner"
           ((tags-todo "TODO<>\"TODO\"+TODO<>\"SOMEDAY\"+SCHEDULED<\"<today>\"-repeat"
                       ((org-agenda-overriding-header
                         "Yesterday Next Actions")
                        (org-tags-match-list-sublevels t)))

            ;; (tags-todo "TODO=\"TODO\"+TIMESTAMP_IA<\"<today>\"-repeat"
            ;;            ((org-agenda-overriding-header
            ;;              "Old Wishes")
            ;;             (org-tags-match-list-sublevels t)))

            ;; (tags-todo "TODO=\"TODO\"+TIMESTAMP_IA<\"<tomorrow>\"+TIMESTAMP_IA>=\"<today>\"-repeat"
            ;;            ((org-agenda-overriding-header
            ;;              "Wish Inbox")
            ;;             (org-tags-match-list-sublevels t)))

            (tags-todo "TODO=\"TODO\"-repeat"
                       ((org-agenda-overriding-header
                         "Wish Inbox")
                        (org-tags-match-list-sublevels t)))

            (agenda ""
                    ((org-agenda-ndays 1)
                     (org-agenda-deadline-warning-days 30)
                     (org-agenda-use-time-grid t)
                     (org-agenda-skip-scheduled-if-done t)
                     (org-agenda-skip-deadline-if-done t)
                     (org-agenda-skip-timestamp-if-done t)
                     (org-agenda-skip-archived-trees t)
                     (org-agenda-skip-comment-trees t)
                     (org-agenda-todo-list-sublevel t)
                     (org-agenda-timeline-show-empty-dates nil)))

            (tags-todo "TODO=\"NEXT\"+SCHEDULED>=\"<tomorrow>\"+SCHEDULED<=\"<+3d>\""
                       ((org-agenda-overriding-header
                         "Next Actions in the next 3 days")
                        (org-tags-match-list-sublevels nil)))

            (tags-todo "TODO=\"SOMEDAY\""
                       ((org-agenda-overriding-header
                         "Someday/Maybe Items")
                        (org-tags-match-list-sublevels nil)))))

          ;;----------------------------------------------------------
          ("d" "Agenda Today"
           ((agenda ""
                    ((org-agenda-ndays 1)
                     (org-agenda-deadline-warning-days 14)
                     (org-agenda-use-time-grid t)
                     (org-agenda-skip-scheduled-if-done t)
                     (org-agenda-skip-deadline-if-done t)
                     (org-agenda-skip-timestamp-if-done t)
                     (org-agenda-skip-archived-trees t)
                     (org-agenda-skip-comment-trees t)
                     (org-agenda-todo-list-sublevel t)
                     (org-agenda-timeline-show-empty-dates nil)))

            (tags-todo "TODO=\"STARTED\"|TODO=\"WAITING\""
                       ((org-agenda-overriding-header
                         "Current Next Actions")
                        (org-tags-match-list-sublevels t)))

            (tags      "CLOSED<\"<tomorrow>\"+CLOSED>=\"<today>\""
                       ((org-agenda-overriding-header
                         "Finished Next Actions")
                        (org-tags-match-list-sublevels nil)
                        (org-agenda-skip-scheduled-if-done nil)
                        (org-agenda-skip-deadline-if-done nil)
                        (org-agenda-skip-timestamp-if-done nil)
                        (org-agenda-skip-archived-trees nil)))))

          ;;----------------------------------------------------------
          ("w" "Weekly Review"
           ((agenda ""
                    ((org-agenda-span 'week)
                     (org-agenda-ndays 7)
                     (org-agenda-deadline-warning-days 60)
                     (org-agenda-use-time-grid t)
                     (org-agenda-skip-scheduled-if-done nil)
                     (org-agenda-skip-deadline-if-done nil)
                     (org-agenda-skip-timestamp-if-done nil)
                     (org-agenda-skip-archived-trees nil)
                     (org-agenda-skip-comment-trees nil)
                     (org-agenda-todo-list-sublevel t)
                     (org-agenda-timeline-show-empty-dates t)))

            (tags     "CLOSED<\"<tomorrow>\"+CLOSED>=\"<-1w>\""
                     ((org-agenda-overriding-header
                       "Archieve Closed Next Actions in this week")
                      (org-tags-match-list-sublevels t)
                      (org-agenda-skip-scheduled-if-done nil)
                      (org-agenda-skip-deadline-if-done nil)
                      (org-agenda-skip-timestamp-if-done nil)
                      (org-agenda-skip-archived-trees nil)))

           (tags-todo "TODO<>\"TODO\"+SCHEDULED<\"<tomorrow>\"+SCHEDULED>=\"<-1w>\""
                       ((org-agenda-overriding-header
                         "Re-schedule Openning Next Actions")
                        (org-tags-match-list-sublevels t)))

           (tags-todo "TODO=\"TODO\"-repeat"
                      ((org-agenda-overriding-header
                        "Process Old Wishes")
                       (org-tags-match-list-sublevels t)))

           (tags      "proj/!-TODO-SOMEDAY"
                      ((org-agenda-overriding-header
                        "Projects Review")
                       (org-tags-match-list-sublevels t)))))
          ))

  ;;------------------------------------------------------------------
  ;; MobileOrg settings
  ;; NOTE: I use Dropbox serveice
  (setq org-mobile-directory "~/Dropbox/MobileOrg")
  (setq org-mobile-encryption-tempfile
        (concat org-directory "/orgtmpcrypt"))
  (unless (file-exists-p org-mobile-encryption-tempfile)
    (shell-command (concat "touch " org-mobile-encryption-tempfile)))
  (setq org-mobile-files org-agenda-files)
  (setq org-mobile-inbox-for-pull
        (concat org-directory "/gtd/from-mobile.org"))
  (unless (file-exists-p org-mobile-inbox-for-pull)
    (shell-command (concat "touch " org-mobile-inbox-for-pull)))

 ;;-------------------------------------------------------------------
  ;; Agenda view export C-x C-w
  (setq org-agenda-exporter-settings
        '((ps-number-of-columns 2)
          (ps-landscape-mode t)
          ;; (org-agenda-prefix-format " [ ] ")
          ;; (org-agenda-with-colors nil)
          ;; (org-agenda-remove-tags t)
          (org-agenda-add-entry-text-maxlines 5)
          (htmlize-output-type 'css)))

  ;; (setq org-agenda-custom-commands
  ;;       '(("X" agenda "" nil ("~/emacs/org/gtd/agenda.html" "~/emacs/org/gtd/agenda.pdf"))
  ;;         ("Y" alltodo "" nil ("~/emacs/org/gtd/todo.html" "~/emacs/org/gtd/todo.txt" "~/emacs/org/gtd/todo.pdf"))
  ;;         ("p" "Agenda and PhD-related tasks"
  ;;          ((agenda "")
  ;;           (tags-todo "phd")
  ;;           (tags "learn"))
  ;;          nil
  ;;          ("~/emacs/gtd/phd.html"))
  ;;         ("g" "Agenda and Geek-related tasks"
  ;;          ((agenda)
  ;;           (tags-todo "geek")
  ;;           (tags "geek"))
  ;;          nil
  ;;          ("~/emacs/org/gtd/geek.html"))))

  ;;==================================================================
  ;; Capture, refile & archive settings

  ;; NOTE: Swithed from 'remember' to 'org-capture'
  ;; (setq org-remember-default-headline "Tasks")
  ;; (org-remember-insinuate)
  ;; (define-key global-map "\C-cr" 'org-remember)
  ;; New capture system org-capture since version 7.01g
  ;; (define-key global-map "\C-cc" 'org-capture)

  ;; cpature templates
  (setq org-capture-templates
        '(("w" "Capture a New Wish from Emacs"
           entry (file+headline "~/emacs/org/gtd/Capture.org" "Wish Inbox")
           "** TODO %^{New Wish} %^g\n\
   :LOGBOOK:\n\
   - Initial State           \"TODO\"       %U\n\
   - Source\n\
     + Emacs @ %a\n\
   :END:\n\
   :PROPERTIES:\n\
   :DESCRIPTION: %?\n\
   :END:\n\n"
           :empty-lines 1 :prepend t :clock-keep t)

          ("n" "Take a Note from Emacs"
           entry (file+headline "~/emacs/org/gtd/Capture.org" "Notes")
           "** %^{Title} %^G\n\n\
*** Source\n\n\
- Timestamp                                 %U\n\
- Source\n\
  + Emacs @ %a\n\n\
*** Notes\n\n%?\n"
           :empty-lines 1 :prepend t :clock-keep t)

          ("s" "Scrap Text from Emacs"
           entry (file+headline "~/emacs/org/gtd/Capture.org" "Scrapbook")
           "** %^{Title} %^G\n\n\
*** Source\n\n\
- Timestamp                                 %U\n\
- Source\n\
  + Emacs @ %a\n\n\
*** Local clipboard\n\n\
#+BEGIN_EXAMPLE\n\
%x\n\
#+END_EXAMPLE\n\n\
*** Notes\n\n%?\n"
           :empty-lines 1 :prepend t :clock-keep t)

          ("j" "Write a Journal"
           entry (file+headline "~/emacs/org/source/myblogs/oblog/oblog-journal.org" "Un-published")
           "** 【%?】 %^G\n\
   :LOGBOOK:\n\
   - Source                            %U\n\
     + Emacs @ %a\n\
     + WWW   @ %c\n\
   :END:\n\n\n"
           :empty-lines 1 :prepend t :clock-keep t)

          ("e" "Collect new words/phrases/sentences"
           entry (file+headline "~/emacs/org/gtd/Capture.org" "English")
           "** %? %^G\n\
   :LOGBOOK:\n\
   - Source
     + Timestamp                            %U\n\
     + Emacs @ %a
   :END:\n\n\n"
           :empty-lines 1 :prepend t :clock-keep t)

          ("1" "Capture a New Wish from Web Browser"
           entry (file+headline "~/emacs/org/gtd/Capture.org" "Wish Inbox")
           "** TODO %^{New Wish} %^g\n\
   :LOGBOOK:\n\
   - Initial State           \"TODO\"       %U\n\
   - Source\n\
     + WWW @ %c\n\
   :END:\n\
   :PROPERTIES:\n\
   :DESCRIPTION: %?\n\
   :END:\n\n"
           :empty-lines 1 :prepend t :clock-keep t)

          ("2" "Take a Note from Web Browser"
           entry (file+headline "~/emacs/org/gtd/Capture.org" "Notes")
           "** %^{Title} %^G\n\n\
*** Source\n\n\
- Timestamp                                 %U\n\
- Source\n\
  + WWW @ %c\n\n\
*** Notes\n\n%?\n"
           :empty-lines 1 :prepend t :clock-keep t)

          ("3" "Scrap Text from Web Browser"
           entry (file+headline "~/emacs/org/gtd/Capture.org" "Scrapbook")
           "** %^{Title} %^G\n\n\
*** Source\n\n\
- Timestamp                                 %U\n\
- Source\n\
  + WWW @ %c\n\n\
*** Webpage highlights\n\n\
#+BEGIN_EXAMPLE\n\
%i\n\
#+END_EXAMPLE\n\n\
*** Notes\n\n%?\n"
           :empty-lines 1 :prepend t :clock-keep t)

          ("4" "Add a bookmark"
           entry (file+headline "~/emacs/org/gtd/Capture.org" "Bookmark")
           "** %c %^G\n\
   :LOGBOOK:\n\
   - Visit on                               %U\n\
   - Source
     + URL: %
   :END:\n\
   :PROPERTIES:\n\
   :Score: %?\n\
   :DESCRIPTION:\n\
   :END:\n\n"
           :empty-lines 1 :prepend t :clock-keep t)

          ))

  ; Targets include this file and any file contributing to the agenda
  ; - up to 3 levels deep
  (setq org-refile-targets '((nil :maxlevel . 3)
                             (org-agenda-files :maxlevel . 3)))

  ;; Put the newest item on the top
  (setq org-reverse-note-order t)

  ; Stop using paths for refile targets - we file directly with Icicles
  (setq org-refile-use-outline-path t)

  ; Targets complete directly with Icicles
  (setq org-outline-path-complete-in-steps t)

  ; Allow refile to create parent tasks with confirmation
  (setq org-refile-allow-creating-parent-nodes 'confirm)

  ;; Infomation saved in archives
  (setq org-archive-save-context-info
        '(time file category todo priority itags olpath ltags))

  ;; makes it possible to archive tasks that are not marked DONE
  (setq org-archive-mark-done nil)

  ;;==================================================================
  ;; Babel settings

  (require 'ob-C)
  ;; BUG: cannot find this library on Windows 7, strange bug.
  ;;      cause emacs error on Linux, may related with my c-mode settings.
  (require 'ob-R)
  ;; (require 'asymptote)
  (require 'ob-ditaa)
  (require 'ob-dot)
  (require 'ob-latex)
  (require 'ob-emacs-lisp)
  (require 'ob-matlab)
  (require 'ob-octave)
  (require 'ob-org)
  (require 'ob-perl)
  (require 'ob-python)
  (require 'ob-ruby)
  (require 'ob-sh)

  ;; babel evaluation languages
  (setq org-babel-load-languages
        (quote ((C . t) (R . t) (asymptote . t)
                (ditaa . t) (dot . t) (emacs-lisp . t) (latex . t)
                (matlab . t) (octave . t) (org . t) (perl . t)
                (python . t) (ruby . t) (sh . t))))

  ;; Custom library of babel file. Add code blocks to the library from
  ;; any Org-mode file using the `org-babel-lob-ingest' (bound to C-c
  ;; C-v i).
  ;; BUG:
  ;; (setq org-babel-lob-files
  ;;       '("~/emacs/org/babel/library-of-babel.org"))

;;   (defvar org-babel-octave-wrapper-method
;;     "%s
;; save -ascii %s ans")

  (setq org-src-fontify-natively t
        org-confirm-babel-evaluate nil
        org-export-babel-evaluate nil
        org-src-tab-acts-natively t)

  ;; Delete babel temporary diretory instead of trash it.
  ;; macro `bypass-trash-in-function(fun)' sets FUN to always use
  ;; normal deletion, and never trash.
  (mapc (lambda (fun) (eval `(bypass-trash-in-function ,fun)))
        '(org-babel-remove-temporary-directory))

  ;;----------------------------------------------------------------
  ;; LaTeX export settings
  (require 'org-exp)
  (require 'org-latex)
  (setq org-export-latex-coding-system 'utf-8-unix)
  (setq org-export-latex-table-caption-above nil)
  (setq org-export-latex-tables-column-borders t)
  (setq org-export-latex-classes
   (quote (("article" "\\documentclass[11pt]{article}"
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
            ("\\paragraph{%s}" . "\\paragraph*{%s}")
            ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
           ;;------------------------------------------------
           ("report" "\\documentclass[11pt]{report}"
            ("\\part{%s}" . "\\part*{%s}")
            ("\\chapter{%s}" . "\\chapter*{%s}")
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
           ;;-------------------------------------------------
           ("book" "\\documentclass[11pt]{book}"
            ("\\part{%s}" . "\\part*{%s}")
            ("\\chapter{%s}" . "\\chapter*{%s}")
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
           ;;--------------------------------------------------
           ("letter" "\\documentclass[11pt]{letter}"
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
            ("\\paragraph{%s}" . "\\paragraph*{%s}")
            ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
           ;;--------------------------------------------------
           ("beamer" "\\documentclass{beamer}"
            org-beamer-sectioning)
           ;;--------------------------------------------------
           ;; NOTE: ctex documentclasses, no need to use ctex package
           ("ctexart" "\\documentclass[UTF8, winfonts, cs4size, \
a4paper, cap, punct, nospace, indent, fancyhdr, hypperref, fntef]\
{ctexart}"
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
            ("\\paragraph{%s}" . "\\paragraph*{%s}")
            ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
           ;;--------------------------------------------------
           ("ctexrep" "\\documentclass[UTF8, winfonts, cs4size, \
a4paper, cap, punct, nospace, indent, fancyhdr, hypperref, fntef]\
{ctexrep}"
            ("\\part{%s}" . "\\part*{%s}")
            ("\\chapter{%s}" . "\\chapter*{%s}")
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
           ;;--------------------------------------------------
           ("ctexbook" "\\documentclass[UTF8, winfonts, cs4size, \
a4paper, cap, punct, nospace, indent, fancyhdr, hypperref, fntef]\
{ctexbook}"
            ("\\part{%s}" . "\\part*{%s}")
            ("\\chapter{%s}" . "\\chapter*{%s}")
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
           )))

  ;; NOTE: "Alist of default packages to be inserted in the header.
  ;; Change this only if one of the packages here causes an
  ;; incompatibility with another package you are using." The default
  ;; `inputenc' and `fontenc' packages conflicts with `xecjk' and
  ;; `ctex'. The encoding of the input latex files don't need to be
  ;; set.
  (setq org-export-latex-default-packages-alist
        '(("" "fixltx2e" nil)
          ("" "graphicx" t) ("" "longtable" nil)
          ("" "float" nil) ("" "wrapfig" nil)
          ("" "soul" t) ("" "textcomp" t)
          ("" "marvosym" t) ("" "wasysym" t)
          ("" "latexsym" t) ("" "amssymb" t)
          ("bookmarksnumbered, pdfencoding=auto, breaklinks, \
colorlinks, linkcolor=RoyalBlue, urlcolor=blue" "hyperref" nil)))

  ;; code listing settings, new `minted' is also supported
  (setq org-export-latex-listings t)

  ;; NOTE: Alist of packages to be inserted in every LaTeX header.
  ;; These will be inserted after
  ;; `org-export-latex-default-packages-alist'.
  (setq org-export-latex-packages-alist
        '(;; The following 3 packages are required if using `listings'
          ("svgnames, table" "xcolor" t) ("" "listings" t) ("" "setspace" nil)
          ;; Display various latex-related logos
          ("" "metalogo" t) ("" "mflogo" t) ("" "texnames" t)
          ;; xelatex font adjustment (by default)
          ;; ("" "fontspec" nil)
          ;; Some extra text markups
          ;; ("normalem" "ulem" t)
          ;; Some figure-related packages
          ;; ("" "rotating" t) ("" "subfig" t)
          ;; Some table-related packages
          ;; ("" "booktabs" t) ("" "longtable" nil) ("" "multirow" t)
          ;; ("" "tabularx" t) ("" "warpcol" t)
          ;; Some document layout/structure-related packages
          ;; ("" "etex" nil) ("" "multicol" nil) ("" "multind" nil)
          ;; ("" "titlesec" nil)
          ))

  ;; Use xelatex instead of pdflatex for better font supports.
  ;; (setq org-latex-to-pdf-process
  ;;       '("xelatex -interaction nonstopmode -output-directory %o %f"
  ;;         "bibtex %b"
  ;;         "xelatex -interaction nonstopmode -output-directory %o %f"
  ;;         "xelatex -interaction nonstopmode -output-directory %o %f"))

  ;; Better solution: use latexmk, but cause error when using tikz
  ;; (setq org-latex-to-pdf-process
  ;;   '("latexmk -c -bm DRAFT -pdf -pdflatex=\"xelatex -synctex=1 %O %S\" -silent -pvc -f %b"))
  (setq xy:latexmk-flag t)
  (setq org-latex-to-pdf-process
    '("latexmk -xelatex -d -f -silent -c %b"))

  ;; NOTE: fix the bug of current version
  (setq org-latex-preview-ltxpng-directory "./")

  ;; load reftex
  (require 'reftex)
  ;; load cd-latex
  (require 'cdlatex)

  ;; load auctex for better latex editing support C-c '
  ;; (xy/auctex-start)

  (add-hook 'org-mode-hook
            '(lambda ()
               ;; BUG: org-mobile
               (turn-on-auto-fill)
               ;; (org-mode-reftex-setup)
               ;; (turn-on-reftex) ;; start it manually is better.
               ;; (turn-on-org-cdlatex) ;; start it manually is better.
               ;;;; change default math-symbol prefix
               ;; (org-defkey org-cdlatex-mode-map "`" 'nil)
               ;; (org-defkey org-cdlatex-mode-map "¬" 'cdlatex-math-symbol)
               (flyspell-mode 1)
               ;; (autopair-mode -1)
               ;; (xy/yas-start)
               ;; (xy/linkd-start)
               ;; (xy/set-font-write)
               ))

  ;;==================================================================

  ;; Use ditaa/graphviz to generate png pictures.
  ;;  *  Use artist mode to draw ascii picutre,
  ;;  *  then convert to png pictures using ditaa.
  ;; Now ditta is included in org, but I use the
  ;; official release instead.
  ;;
  ;; Tips:
  ;;  *  C-x b to switch buffers. Originally,
  ;;     it is bound for `switch-to-buffer'.
  ;;     Instead, binding `iswitchb-buffer'
  ;;     to C-x b is much easier to use.
  ;;  *  C-x n n to narrow the region, `narrow-to-region'.
  ;;     It is very useful to prevent the unwanted change
  ;;     on other portion of the buffer, and makes the user
  ;;     concentrating on what he or she want to do.
  ;;     The narrowing is reverted by the command, C-x n w `widen'.
  ;;  *  Create a begin_src block for the appropriate tool,
  ;;     edit the text, and build the pictures with C-c C-c.
  ;;     You can view the result directly in Emacs with C-c C-o
  ;;     in the block.

  (setq org-ditaa-jar-path (concat my-local-exec-path "/ditaa.jar"))
  ;; (try-require 'org-babel-init)
  ;; (try-require 'org-babel-ditaa)
  ;; (try-require 'org-babel-dot)
  ;; (org-babel-load-library-of-babel)
  ;; Displays the results in a new frame and
  ;; close the new frame quickly after previewing the results
  ;; (global-set-key [f11] (lambda ()
  ;;                                  (interactive)
  ;;                                  (unless (buffer-modified-p)
  ;;                                    (kill-buffer (current-buffer)))
  ;;                                  (delete-frame)))

  ;;==================================================================
  ;; set default viewer for exported files
  (setq org-file-apps
        (quote ((auto-mode       . emacs)
                ("\\.odc\\'"     . system)
                ("\\.odf\\'"     . system)
                ("\\.odi\\'"     . system)
                ("\\.otp\\'"     . system)
                ("\\.odp\\'"     . system)
                ("\\.otg\\'"     . system)
                ("\\.odg\\'"     . system)
                ("\\.ots\\'"     . system)
                ("\\.ods\\'"     . system)
                ("\\.odm\\'"     . system)
                ("\\.ott\\'"     . system)
                ("\\.odt\\'"     . system)
                ("\\.mm\\'"      . system)
                ("\\.pdf\\'"     . system)
                ("\\.x?html?\\'" . system)
                ("\\.png\\'"     . system)
                ("\\.jpg\\'"     . system)
                ("\\.bmp\\'"     . system)
                ("\\.gif\\'"     . system)
                )))

  ;;==================================================================
  ;; Publishing settings

  (setq org-publish-timestamp-directory
        (concat org-directory "/timestamps"))
  (setq org-publish-use-timestamps-flag t)

;; List of projects
;; http://127.0.0.1/  (localhost)
;; local-org are the org-files that generate the content
;; local-extra are images and css files that need to be included
;; local is the top-level project that gets published
  (setq org-publish-project-alist
      (quote(
             ("local-org"
              :base-directory "~/emacs/org/source/"
              ;;            :preparation-funtion
              ;;            :completion-function
              :base-extension "org"
              ;;            :exclude
              ;;            :include
              :publishing-function org-publish-org-to-html
              :plain-source nil
              :htmlized-source nil
              ;;            :link-up
              ;;            :link-home
              :language utf-8
              ;;            :customtime
              ;;            :headline-levels
              ;;            :section-numbers
              ;;            :section-number-format
              :table-of-contents t
              ;;            :preserve-breaks
              :archived-trees nil
              :emphasize t
              :sub-superscript t
              ;;            :special-strings
              :footnotes t
              :drawers nil
              :tags t
              :todo-keywords t
              :priority t
              :TeX-macros t
              :LaTeX-fragments t
              :latex-listings nil
              :skip-before-1st-heading nil
              :fixed-width t
              :timestamps t
              :author-info t
              :email-info nil
              :creator-info nil
              :tables t
              :table-auto-headline t
              :style-include-default t
              :style "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://dl.dropbox.com/u/7817597/stylesheets/org.css\" />"
              ;;            :style-extra "<link rel=\"stylesheet\" href=\"http://127.0.0.1/stylesheets/org.css\" type=\"text/css\" />"
              :convert-org-links t
              :inline-images t
              ;;            :html-extension
              ;;            :xml-declaration
              ;;            :html-table-tag
              :expand-quoted-html t
              :timestamp t
              ;; :publishing-directory "/ftp:xin@127.0.0.1:/org/"
              :publishing-directory "~/emacs/org/html/"
              ;;            :preamble
              ;;            :postamble
              ;;            :auto-preamble
              ;;            :auto-postamble
              :author "Xin Yang"
              :email "Xin2.Yang@gmail.com"
              ;;            :select-tags
              ;;            :exclude-tags
              ;;            :latex-image-options
              :auto-sitemap t
              :sitemap-filename "SiteMap.org"
              :sitemap-title "Sitemap of local website"
              :sitemap-function org-publish-org-sitemap
              :sitemap-sort-folders last
              :sitemap-alphabetically t
              :sitemap-ignore-case t
              :makeindex nil
              :recursive t
              )
             ("local-extra"
              :base-directory "~/emacs/org/source/"
              :base-extension "css\\|pdf\\|png\\|jpg\\|gif\\|CSS\\|PDF\\|PNG\\|JPG\\|GIF\\|c\\|C\\|m\\|M\\|vhd\\|VHD\\|v\\|V\\|cpp\\|CPP"
              ;; :publishing-directory "/ftp:xin@127.0.0.1:/org/"
              :publishing-directory "~/emacs/org/html/"
              :publishing-function org-publish-attachment
              :recursive t
              :author nil
              )
             ("local-addon"
              :base-directory "~/emacs/org/addon/"
              :base-extension "css\\|pdf\\|png\\|jpg\\|gif\\|CSS\\|PDF\\|PNG\\|JPG\\|GIF"
              ;; :publishing-directory "/ftp:xin@127.0.0.1:/org/"
              :publishing-directory "~/emacs/org/html/"
              :publishing-function org-publish-attachment
              :recursive t
              :author nil
              )
             ("local"
              :components ("local-org" "local-extra" "local-addon")
              )

             ;; PhD documents export to LaTeX draft
             ("phd-org"
              :base-directory "~/emacs/org/source/phd"
              ;;            :preparation-funtion
              ;;            :completion-function
              :base-extension "org"
              ;;            :exclude
              ;;            :include
              :publishing-function org-publish-org-to-latex
              :plain-source nil
              :htmlized-source nil
              :link-up t
              :link-home t
              :language utf-8
              ;;            :customtime
              ;;            :headline-levels
              ;;            :section-numbers
              ;;            :section-number-format
              :table-of-contents t
              ;;            :preserve-breaks
              :archived-trees nil
              :emphasize t
              :sub-superscript t
              ;;            :special-strings
              :footnotes t
              :drawers nil
              :tags nil
              :todo-keywords nil
              :priority nil
              :TeX-macros t
              :LaTeX-fragments t
              :latex-listings t
              :skip-before-1st-heading nil
              :fixed-width t
              :timestamps t
              :author-info t
              :email-info t
              :creator-info nil
              :tables t
              :table-auto-headline t
              ;;            :style-include-default t
              ;;            :style "<link rel=\"stylesheet\" href=\"https://dl.dropbox.com/u/7817597/stylesheets/org.css\" type=\"text/css\">"
              ;;            :style-extra "<link rel=\"stylesheet\" href=\"http://127.0.0.1/stylesheets/org.css\" type=\"text/css\" />"
              :convert-org-links t
              :inline-images t
              ;;            :html-extension
              ;;            :xml-declaration
              ;;            :html-table-tag
              ;;            :expand-quoted-html t
              ;;            :timestamp t
              :publishing-directory "~/emacs/org/latex/phd"
              ;;            :preamble
              ;;            :postamble
              ;;            :auto-preamble
              ;;            :auto-postamble
              :author "Xin Yang"
              :email "Xin2.Yang@gmail.com"
              ;;            :select-tags
              ;;            :exclude-tags
              ;;-----------------------------------------------------------
              ;;            :latex-image-options
              ;;------------------------------------------------------------
              :auto-sitemap nil
              ;; :sitemap-filename "SiteMap.org"
              ;; :sitemap-title "Index of my PhD documents"
              ;; :sitemap-function org-publish-org-sitemap
              ;; :sitemap-sort-folders last
              ;; :sitemap-alphabetically t
              ;; :sitemap-ignore-case t
              :makeindex nil
              :recursive t
              )
             ("phd-img"
              :base-directory "~/emacs/org/source/phd/img"
              :base-extension "pdf\\|ps\\|png\\|jpg\\|bmp\\|eps\\|svg\\|PDF\\|PS\\|PNG\\|JPG\\|BMP\\|EPS\\|SVG"
              :publishing-directory "~/emacs/org/latex/phd/img"
              :publishing-function org-publish-attachment
              :recursive t
              )
             ("phd-src"
              :base-directory "~/emacs/org/source/phd/src"
              :base-extension "v\\|vhd\\|c\\|hcc\\|cpp\\|m\\|V\\|VHD\\|C\\|HCC\\|CPP\\|M"
              :publishing-directory "~/emacs/org/latex/phd/src"
              :publishing-function org-publish-attachment
              :recursive t
              )
             ("phd-bib"
              :base-directory "~/emacs/org/source/phd/bib"
              :base-extension "bib\\|bst\\|BIB\\|BST"
              :publishing-directory "~/emacs/org/latex/phd/bib"
              :publishing-function org-publish-attachment
              :recursive t
              )
             ("phd-all"
              :components ("phd-org" "phd-img" "phd-src" "phd-bib")
              )
             )))

  ;; NOTE: not in use
  ;; (setq org-protocol-project-alist
  ;;       '(;; ("Worg"
  ;;         ;;  :base-url "http://orgmode.org/worg/"
  ;;         ;;  :working-directory "/home/user/worg/"
  ;;         ;;  :online-suffix ".html"
  ;;         ;;  :working-suffix ".org")
  ;;         ("My local Org-notes"
  ;;          :base-url "http://localhost/org/"
  ;;          :working-directory "~/emacs/org/source/"
  ;;          :online-suffix ".php"
  ;;          :working-suffix ".org")))

  ;;==================================================================
  ;; Contrib lisps

  ;; org-mime
  ;; REF: (@url :file-name "http://orgmode.org/worg/org-contrib/org-mime.html" :display "worg")
  (when (try-require 'org-mime)
    ;; (setq org-mime-library 'mml)
    (add-hook 'org-mode-hook
              (lambda ()
                (local-set-key "\C-c\M-o"
                               'org-mime-org-buffer-htmlize)))
    (add-hook 'org-mime-html-hook
              (lambda ()
                (org-mime-change-element-style
                 "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                               "#E6E1DC" "#232323"))
                (org-mime-change-element-style
                 "blockquote" "border-left: 2px solid gray; padding-left: 4px;"))))


  ;;------------------------------------------------------------------
  ;; `org-google-weather' NOTE: google disabled its weather api recently
  ;; google-weather-el for org
  ;; Add the following in one of your Org file.
  ;;   * Weather
  ;;   %%(org-google-weather "New York" "en-gb")
  ;; (eval-after-load "org-google-weather" '(org-google-weather-postload))
  ;; (try-require 'org-google-weather)

  ;;------------------------------------------------------------------
  ;; `org-location-google-maps'
  ;; google-maps API for org
  (try-require 'org-location-google-maps)

  ;;------------------------------------------------------------------
  ;; `org-html5presentation' not very useful now
  ;; HTML5 Presentation export for Org-mode
  ;; (try-require 'org-html5presentation)

  ;;------------------------------------------------------------------
  ;; `o-blog'
  ;; A stand-alone blog and publication tool for org-mode.
  (try-require 'o-blog)

  ;;------------------------------------------------------------------
  ;; `org2blog'
  (try-require 'org2blog)

  ;;------------------------------------------------------------------

  (message "* ---[ org post-load configuration is complete ]---"))

(provide 'xy-rc-org)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; ahei's settings
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (require 'org-install)

;; (defun org-settings ()
;;   "Settings for `org'."

;;   (setq org-startup-folded nil
;;         org-cycle-include-plain-lists t)
;;   (setq org-log-done 'time)

;;   (defun org-hook-settings ()
;;     "Hook settings for `org'."
;;     (setq truncate-lines nil)
;;     (eval-after-load "hideshow"
;;       '(progn
;;         (setq fold-all-fun 'org-toggle-display-content
;;               fold-fun 'org-toggle-fold-subtree)))
;;     (org-literal-links))
;;   (add-hook 'org-mode-hook 'org-hook-settings)

;;   (defun org-kill-whole-line (&optional arg)
;;     "Kill line, to tags or end of line."
;;     (interactive "P")
;;     (cond
;;      ((or (not org-special-ctrl-k)
;;           (bolp)
;;           (not (org-on-heading-p)))
;;       (call-interactively 'kill-whole-line))
;;      ((looking-at (org-re ".*?\\S-\\([ \t]+\\(:[[:alnum:]_@:]+:\\)\\)[ \t]*$"))
;;       (kill-region (point) (match-beginning 1))
;;       (org-set-tags nil t))
;;      (t (kill-region (point) (point-at-eol)))))

;;   (defun org-literal-links ()
;;     "Show literal links."
;;     (interactive)
;;     (org-remove-from-invisibility-spec '(org-link)) (org-restart-font-lock))

;;   (defun org-descriptive-links ()
;;     "Show descriptive links."
;;     (interactive)
;;     (org-add-to-invisibility-spec '(org-link)) (org-restart-font-lock))

;;   (defun org-display-content ()
;;     "Display content in `org-mode'."
;;     (interactive)
;;     (org-overview)
;;     (org-content))

;;   (defvar org-display-content nil "Display content or not now.")
;;   (make-variable-buffer-local 'org-display-content)

;;   (defvar org-fold-subtree nil "Fold subtree or not now.")
;;   (make-variable-buffer-local 'org-fold-subtree)

;;   (defun org-toggle-display-content ()
;;     "Toggle display content."
;;     (interactive)
;;     (setq org-display-content (not org-display-content))
;;     (if org-display-content
;;         (org-display-content)
;;       (show-all)))

;;   (defun org-toggle-fold-subtree ()
;;     "Toggle fold subtree."
;;     (interactive)
;;     (setq org-fold-subtree (not org-fold-subtree))
;;     (if org-fold-subtree
;;         (hide-subtree)
;;       (show-subtree)))

;;   (defun org-settings-4-emaci ()
;;     "`org-mode' settings for `emaci'."
;;     (emaci-add-key-definition "N" 'outline-next-visible-heading
;;                               '(eq major-mode 'org-mode))
;;     (emaci-add-key-definition "P" 'outline-previous-visible-heading
;;                               '(eq major-mode 'org-mode)))

;;   (eval-after-load "emaci"
;;     '(progn
;;       (org-settings-4-emaci)))

;;   (eal-define-keys
;;    'emaci-mode-map
;;    `(("N" emaci-N)
;;      ("P" emaci-P)))

;;   (defun org-jsinfo-settings ()
;;     "Settings for `org-jsinfo'."
;;     (setcdr (assoc 'view org-infojs-options) "showall"))

;;   (eval-after-load "org-jsinfo"
;;     '(progn
;;       (org-jsinfo-settings))))

;; (eal-define-keys
;;  'org-mode-map
;;  `(("C-c e"   org-table-edit-field)
;;    ("C-k"     org-kill-whole-line)
;;    ("C-c M-b" org-export-as-html-and-open)
;;    ("C-c M-h" org-export-as-html)
;;    ("<tab>"   nil)
;;    ("C-j"     nil)
;;    ("C-c n"   org-forward-same-level)
;;    ("C-c p"   org-backward-same-level)
;;    ("C-c M-l" org-shiftright)
;;    ("C-c ,"   org-priority-sb)))

;; (eal-define-keys
;;  'org-agenda-mode-map
;;  `(("'" switch-to-other-buffer)
;;    ("1" delete-other-windows)
;;    ("2" split-window-vertically)
;;    ("3" split-window-horizontally)
;;    ("o" other-window)))

;; (defun org-colview-settings ()
;;   "Settings for `org-colview'."
;;   (org-defkey org-columns-map "e" 'org-columns-edit-value-sb)
;;   (org-defkey org-columns-map "h" 'backward-char)
;;   (org-defkey org-columns-map "l" 'forward-char)
;;   (org-defkey org-columns-map "j" 'next-line)
;;   (org-defkey org-columns-map "k" 'previous-line)
;;   (define-key org-columns-map "f" (key-binding (kbd "M-f")))
;;   (define-key org-columns-map "b" (key-binding (kbd "M-b"))))
