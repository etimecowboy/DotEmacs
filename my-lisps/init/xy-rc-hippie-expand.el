;;   -*- mode: emacs-lisp; coding: utf-8-unix  -*-
;; Time-stamp: <2015-04-27 Mon 21:50 by xin on zbox.soton.ac.uk>
;;--------------------------------------------------------------------
;; File name:    `xy-rc-hippie-expand.el'
;; Author:       Xin Yang
;; Email:        xin2.yang@gmail.com
;; Depend on:    None
;; Description:  My `hippie-expand.el' settings
;;    ___ _ __ ___   __ _  ___ ___
;;   / _ \ '_ ` _ \ / _` |/ __/ __|
;;  |  __/ | | | | | (_| | (__\__ \
;;  \____|_| |_| |_|\__,_|\___|___/
;;
;;--------------------------------------------------------------------

(eval-when-compile (require 'cl))
(require 'xy-rc-utils)

;; ywb-hippie-expand-filename,
;; 补全文件名。由于 hippie-expand 主要用于补全单词，补全文件名是很困难
;; 的，所以单独写了一个命令用于补全文件名。
;;;###autoload
(defun ywb-hippie-expand-filename ()
  "自动补全文件名."
  (interactive)
  (let ((hippie-expand-try-functions-list
         '(try-complete-file-name
           try-complete-file-name-partially)))
    (call-interactively 'hippie-expand)))



;; Flexible match expansion
;; REF: (@url :file-name "http://www.emacswiki.org/emacs/HippieExpand#toc8" :display "emacswiki")
;;;###autoload
(defun try-expand-flexible-abbrev (old)
  "Try to complete word using flexible matching.

Flexible matching works by taking the search string and then
interspersing it with a regexp for any character. So, if you try
to do a flexible match for `foo' it will match the word
`findOtherOtter' but also `fixTheBoringOrange' and
`ifthisisboringstopreadingnow'.

The argument OLD has to be nil the first call of this function, and t
for subsequent calls (for further possible completions of the same
string).  It returns t if a new completion is found, nil otherwise."
  (if (not old)
      (progn
        (he-init-string (he-lisp-symbol-beg) (point))
        (if (not (he-string-member he-search-string he-tried-table))
            (setq he-tried-table (cons he-search-string he-tried-table)))
        (setq he-expand-list
              (and (not (equal he-search-string ""))
                   (he-flexible-abbrev-collect he-search-string)))))
  (while (and he-expand-list
              (he-string-member (car he-expand-list) he-tried-table))
    (setq he-expand-list (cdr he-expand-list)))
  (if (null he-expand-list)
      (progn
        (if old (he-reset-string))
        ())
    (progn
      (he-substitute-string (car he-expand-list))
      (setq he-expand-list (cdr he-expand-list))
      t)))

(defun he-flexible-abbrev-collect (str)
  "Find and collect all words that flex-matches STR.
See docstring for `try-expand-flexible-abbrev' for information
about what flexible matching means in this context."
  (let ((collection nil)
        (regexp (he-flexible-abbrev-create-regexp str)))
    (save-excursion
      (goto-char (point-min))
      (while (search-forward-regexp regexp nil t)
        ;; Is there a better or quicker way than using
        ;; `thing-at-point' here?
        (setq collection (cons (thing-at-point 'word) collection))))
    collection))

(defun he-flexible-abbrev-create-regexp (str)
  "Generate regexp for flexible matching of STR.
See docstring for `try-expand-flexible-abbrev' for information
about what flexible matching means in this context."
  (concat "\\b" (mapconcat (lambda (x) (concat "\\w*" (list x))) str "")
          "\\w*" "\\b"))

;; (setq hippie-expand-try-functions-list
      ;; (cons 'try-expand-flexible-abbrev hippie-expand-try-functions-list))



;; Expansion menu
;; REF: (@url :file-name "http://www.emacswiki.org/emacs/HippieExpand#toc10" :display "emacswiki")
;;;###autoload
(defun my-hippie-expand-completions (&optional hippie-expand-function)
  "Return the full list of possible completions generated by `hippie-expand'.
    The optional argument can be generated with `make-hippie-expand-function'."
  (let ((this-command 'my-hippie-expand-completions)
        (last-command last-command)
        (buffer-modified (buffer-modified-p))
        (hippie-expand-function (or hippie-expand-function 'hippie-expand)))
    (flet ((ding)) ; avoid the (ding) when hippie-expand exhausts its options.
      (while (progn
               (funcall hippie-expand-function nil)
               (setq last-command 'my-hippie-expand-completions)
               (not (equal he-num -1)))))
    ;; Evaluating the completions modifies the buffer, however we will finish
    ;; up in the same state that we began, and (save-current-buffer) seems a
    ;; bit heavyweight in the circumstances.
    (set-buffer-modified-p buffer-modified)
    ;; Provide the options in the order in which they are normally generated.
    (delete he-search-string (reverse he-tried-table))))

;; (defmacro my-ido-hippie-expand-with (hippie-expand-function)
;;   "Generate an interactively-callable function that offers ido-based completion
;;     using the specified hippie-expand function."
;;   `(call-interactively
;;     (lambda (&optional selection)
;;       (interactive
;;        (let ((options (my-hippie-expand-completions ,hippie-expand-function)))
;;          (if options
;;              (list (ido-completing-read "Completions: " options)))))
;;       (if selection
;;           (he-substitute-string selection t)
;;         (message "No expansion found")))))

;; ;;;###autoload
;; (defun my-ido-hippie-expand ()
;;   "Offer ido-based completion for the word at point."
;;   (interactive)
;;   (my-ido-hippie-expand-with 'hippie-expand))

;; (global-set-key (kbd "C-c /") 'my-ido-hippie-expand)

;; ;;;###autoload
;; (defun my-ido-hippie-expand-filename ()
;;   "Offer ido-based completion for the filename at point."
;;   (interactive)
;;   (my-ido-hippie-expand-with
;;    (make-hippie-expand-function '(try-complete-file-name))))

;; (global-set-key (kbd "C-c C-f") 'my-ido-hippie-expand-filename)



;;;###autoload
(defun hippie-expand-postload ()
  "Settings for `hippie-expand' after it's been loaded."
  (setq hippie-expand-try-functions-list
        '(try-expand-flexible-abbrev
          try-expand-dabbrev
          try-expand-dabbrev-visible
          try-expand-dabbrev-all-buffers
          try-expand-dabbrev-from-kill
          try-complete-file-name-partially
          try-complete-file-name
          try-expand-all-abbrevs
          try-expand-list
          try-expand-line
          try-complete-lisp-symbol-partially
          try-complete-lisp-symbol
          try-expand-whole-kill))

  (am-add-hooks
   `(emacs-lisp-mode-hook lisp-interaction-mode-hook)
   '(lambda ()
      (make-local-variable 'hippie-expand-try-functions-list)
      (setq hippie-expand-try-functions-list
            '(try-expand-dabbrev
              try-expand-dabbrev-visible
              try-expand-dabbrev-all-buffers
              try-expand-dabbrev-from-kill
              try-complete-file-name-partially
              try-complete-file-name
              try-expand-all-abbrevs
              try-expand-list
              try-expand-line
              try-expand-whole-kill))))

  (message "* ---[ hippie-expand post-load configuration is complete ]---"))

(provide 'xy-rc-hippie-expand)
